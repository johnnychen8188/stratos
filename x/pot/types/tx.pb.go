// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/pot/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgVolumeReport encapsulates an VolumeReport transaction as an SDK message.
type MsgVolumeReport struct {
	WalletVolumes   []*SingleWalletVolume                   `protobuf:"bytes,1,rep,name=wallet_volumes,json=walletVolumes,proto3" json:"wallet_volumes" yaml:"wallet_volumes"`
	Reporter        string                                  `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter" yaml:"reporter"`
	Epoch           *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=epoch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"epoch" yaml:"epoch"`
	ReportReference string                                  `protobuf:"bytes,4,opt,name=report_reference,json=reportReference,proto3" json:"report_reference" yaml:"report_reference"`
	ReporterOwner   string                                  `protobuf:"bytes,5,opt,name=reporter_owner,json=reporterOwner,proto3" json:"reporter_owner" yaml:"reporter_owner"`
	BLSSignature    *BLSSignatureInfo                       `protobuf:"bytes,6,opt,name=BLS_signature,json=BLSSignature,proto3" json:"bls_signature" yaml:"bls_signature"`
}

func (m *MsgVolumeReport) Reset()         { *m = MsgVolumeReport{} }
func (m *MsgVolumeReport) String() string { return proto.CompactTextString(m) }
func (*MsgVolumeReport) ProtoMessage()    {}
func (*MsgVolumeReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_103c258cace119ca, []int{0}
}
func (m *MsgVolumeReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVolumeReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVolumeReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVolumeReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVolumeReport.Merge(m, src)
}
func (m *MsgVolumeReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgVolumeReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVolumeReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVolumeReport proto.InternalMessageInfo

func (m *MsgVolumeReport) GetWalletVolumes() []*SingleWalletVolume {
	if m != nil {
		return m.WalletVolumes
	}
	return nil
}

func (m *MsgVolumeReport) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *MsgVolumeReport) GetReportReference() string {
	if m != nil {
		return m.ReportReference
	}
	return ""
}

func (m *MsgVolumeReport) GetReporterOwner() string {
	if m != nil {
		return m.ReporterOwner
	}
	return ""
}

func (m *MsgVolumeReport) GetBLSSignature() *BLSSignatureInfo {
	if m != nil {
		return m.BLSSignature
	}
	return nil
}

// MsgVolumeReportResponse defines the MsgVolumeReport response type
type MsgVolumeReportResponse struct {
}

func (m *MsgVolumeReportResponse) Reset()         { *m = MsgVolumeReportResponse{} }
func (m *MsgVolumeReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVolumeReportResponse) ProtoMessage()    {}
func (*MsgVolumeReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_103c258cace119ca, []int{1}
}
func (m *MsgVolumeReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVolumeReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVolumeReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVolumeReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVolumeReportResponse.Merge(m, src)
}
func (m *MsgVolumeReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVolumeReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVolumeReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVolumeReportResponse proto.InternalMessageInfo

// MsgWithdraw encapsulates an withdraw transaction as an SDK message.
type MsgWithdraw struct {
	Amount        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	WalletAddress string                                   `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address" yaml:"wallet_address"`
	TargetAddress string                                   `protobuf:"bytes,3,opt,name=target_address,json=targetAddress,proto3" json:"target_address" yaml:"target_address"`
}

func (m *MsgWithdraw) Reset()         { *m = MsgWithdraw{} }
func (m *MsgWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgWithdraw) ProtoMessage()    {}
func (*MsgWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_103c258cace119ca, []int{2}
}
func (m *MsgWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdraw.Merge(m, src)
}
func (m *MsgWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdraw proto.InternalMessageInfo

func (m *MsgWithdraw) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgWithdraw) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *MsgWithdraw) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

// MsgWithdrawResponse defines the Msg/MsgWithdraw response type.
type MsgWithdrawResponse struct {
}

func (m *MsgWithdrawResponse) Reset()         { *m = MsgWithdrawResponse{} }
func (m *MsgWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawResponse) ProtoMessage()    {}
func (*MsgWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_103c258cace119ca, []int{3}
}
func (m *MsgWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawResponse.Merge(m, src)
}
func (m *MsgWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawResponse proto.InternalMessageInfo

// MsgFoundationDeposit - encapsulates an FoundationDeposit transaction as an SDK message
type MsgFoundationDeposit struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	From   string                                   `protobuf:"bytes,2,opt,name=from,proto3" json:"from" yaml:"from"`
}

func (m *MsgFoundationDeposit) Reset()         { *m = MsgFoundationDeposit{} }
func (m *MsgFoundationDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgFoundationDeposit) ProtoMessage()    {}
func (*MsgFoundationDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_103c258cace119ca, []int{4}
}
func (m *MsgFoundationDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFoundationDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFoundationDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFoundationDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFoundationDeposit.Merge(m, src)
}
func (m *MsgFoundationDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgFoundationDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFoundationDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFoundationDeposit proto.InternalMessageInfo

func (m *MsgFoundationDeposit) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgFoundationDeposit) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

// MsgFoundationDepositResponse defines the MsgFoundationDeposit response type
type MsgFoundationDepositResponse struct {
}

func (m *MsgFoundationDepositResponse) Reset()         { *m = MsgFoundationDepositResponse{} }
func (m *MsgFoundationDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFoundationDepositResponse) ProtoMessage()    {}
func (*MsgFoundationDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_103c258cace119ca, []int{5}
}
func (m *MsgFoundationDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFoundationDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFoundationDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFoundationDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFoundationDepositResponse.Merge(m, src)
}
func (m *MsgFoundationDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFoundationDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFoundationDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFoundationDepositResponse proto.InternalMessageInfo

// MsgRemoveIndexingNode - encapsulates an MsgRemoveIndexingNode transaction as an SDK message
type MsgSlashingResourceNode struct {
	Reporters      []string                                `protobuf:"bytes,1,rep,name=reporters,proto3" json:"reporters" yaml:"reporters"`
	ReporterOwner  []string                                `protobuf:"bytes,2,rep,name=reporter_owner,json=reporterOwner,proto3" json:"reporter_owner" yaml:"reporter_owner"`
	NetworkAddress string                                  `protobuf:"bytes,3,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	WalletAddress  string                                  `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address" yaml:"wallet_address"`
	Slashing       *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=slashing,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"slashing" yaml:"slashing"`
	Suspend        bool                                    `protobuf:"varint,6,opt,name=suspend,proto3" json:"suspend" yaml:"suspend"`
}

func (m *MsgSlashingResourceNode) Reset()         { *m = MsgSlashingResourceNode{} }
func (m *MsgSlashingResourceNode) String() string { return proto.CompactTextString(m) }
func (*MsgSlashingResourceNode) ProtoMessage()    {}
func (*MsgSlashingResourceNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_103c258cace119ca, []int{6}
}
func (m *MsgSlashingResourceNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSlashingResourceNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSlashingResourceNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSlashingResourceNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSlashingResourceNode.Merge(m, src)
}
func (m *MsgSlashingResourceNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgSlashingResourceNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSlashingResourceNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSlashingResourceNode proto.InternalMessageInfo

func (m *MsgSlashingResourceNode) GetReporters() []string {
	if m != nil {
		return m.Reporters
	}
	return nil
}

func (m *MsgSlashingResourceNode) GetReporterOwner() []string {
	if m != nil {
		return m.ReporterOwner
	}
	return nil
}

func (m *MsgSlashingResourceNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *MsgSlashingResourceNode) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *MsgSlashingResourceNode) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

// MsgSlashingResourceNodeResponse defines the Msg/MsgSlashingResourceNode response type.
type MsgSlashingResourceNodeResponse struct {
}

func (m *MsgSlashingResourceNodeResponse) Reset()         { *m = MsgSlashingResourceNodeResponse{} }
func (m *MsgSlashingResourceNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSlashingResourceNodeResponse) ProtoMessage()    {}
func (*MsgSlashingResourceNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_103c258cace119ca, []int{7}
}
func (m *MsgSlashingResourceNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSlashingResourceNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSlashingResourceNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSlashingResourceNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSlashingResourceNodeResponse.Merge(m, src)
}
func (m *MsgSlashingResourceNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSlashingResourceNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSlashingResourceNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSlashingResourceNodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgVolumeReport)(nil), "stratos.pot.v1.MsgVolumeReport")
	proto.RegisterType((*MsgVolumeReportResponse)(nil), "stratos.pot.v1.MsgVolumeReportResponse")
	proto.RegisterType((*MsgWithdraw)(nil), "stratos.pot.v1.MsgWithdraw")
	proto.RegisterType((*MsgWithdrawResponse)(nil), "stratos.pot.v1.MsgWithdrawResponse")
	proto.RegisterType((*MsgFoundationDeposit)(nil), "stratos.pot.v1.MsgFoundationDeposit")
	proto.RegisterType((*MsgFoundationDepositResponse)(nil), "stratos.pot.v1.MsgFoundationDepositResponse")
	proto.RegisterType((*MsgSlashingResourceNode)(nil), "stratos.pot.v1.MsgSlashingResourceNode")
	proto.RegisterType((*MsgSlashingResourceNodeResponse)(nil), "stratos.pot.v1.MsgSlashingResourceNodeResponse")
}

func init() { proto.RegisterFile("stratos/pot/v1/tx.proto", fileDescriptor_103c258cace119ca) }

var fileDescriptor_103c258cace119ca = []byte{
	// 979 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xc6, 0x6e, 0x48, 0x26, 0xb5, 0x53, 0x96, 0x84, 0xb8, 0xa6, 0xf1, 0xb8, 0x43, 0x29,
	0x86, 0x92, 0x5d, 0x25, 0x1c, 0x90, 0xe0, 0x80, 0x70, 0x11, 0x22, 0xa2, 0x01, 0x69, 0x2d, 0xb5,
	0xa2, 0x17, 0x6b, 0xed, 0x9d, 0xac, 0x57, 0x5d, 0xcf, 0xac, 0x76, 0xc6, 0x76, 0x7b, 0xe1, 0xc0,
	0x89, 0x23, 0x12, 0x57, 0xfe, 0x00, 0xdc, 0xf9, 0x05, 0xbd, 0xf4, 0x58, 0x09, 0x0e, 0x88, 0xc3,
	0x80, 0x12, 0x4e, 0x7b, 0xdc, 0x23, 0x27, 0xe4, 0x99, 0xd9, 0xb5, 0xbd, 0x31, 0x10, 0x94, 0x43,
	0x4f, 0xf1, 0x7c, 0xdf, 0x7b, 0xdf, 0x7b, 0xfb, 0xf6, 0x9b, 0xb7, 0x01, 0xbb, 0x8c, 0xc7, 0x2e,
	0xa7, 0xcc, 0x8e, 0x28, 0xb7, 0xc7, 0x07, 0x36, 0x7f, 0x6c, 0x45, 0x31, 0xe5, 0xd4, 0xac, 0x6a,
	0xc2, 0x8a, 0x28, 0xb7, 0xc6, 0x07, 0xf5, 0x6d, 0x9f, 0xfa, 0x54, 0x52, 0xf6, 0xf4, 0x97, 0x8a,
	0xaa, 0xdf, 0xf0, 0x29, 0xf5, 0x43, 0x6c, 0xbb, 0x51, 0x60, 0xbb, 0x84, 0x50, 0xee, 0xf2, 0x80,
	0x12, 0xa6, 0xd9, 0x5a, 0x41, 0x7c, 0x2a, 0xa5, 0x98, 0x46, 0x9f, 0xb2, 0x21, 0x65, 0x76, 0xcf,
	0x65, 0xd8, 0x1e, 0x1f, 0xf4, 0x30, 0x77, 0x0f, 0xec, 0x3e, 0x0d, 0x88, 0xe2, 0xd1, 0xd3, 0x32,
	0xd8, 0x3a, 0x66, 0xfe, 0x7d, 0x1a, 0x8e, 0x86, 0xd8, 0xc1, 0x11, 0x8d, 0xb9, 0x39, 0x06, 0xd5,
	0x89, 0x1b, 0x86, 0x98, 0x77, 0xc7, 0x12, 0x66, 0x35, 0xa3, 0x59, 0x6a, 0x6d, 0x1e, 0x22, 0x6b,
	0xb1, 0x55, 0xab, 0x13, 0x10, 0x3f, 0xc4, 0x0f, 0x64, 0xac, 0x52, 0x68, 0xdf, 0x49, 0x04, 0x2c,
	0x64, 0xa7, 0x02, 0xee, 0x3c, 0x71, 0x87, 0xe1, 0xfb, 0x68, 0x11, 0x47, 0x4e, 0x65, 0x32, 0x97,
	0xca, 0xcc, 0x0f, 0xc0, 0x7a, 0x2c, 0x3b, 0xc0, 0x71, 0x6d, 0xb5, 0x69, 0xb4, 0x36, 0xda, 0x30,
	0x11, 0x30, 0xc7, 0x52, 0x01, 0xb7, 0x94, 0x4e, 0x86, 0x20, 0x27, 0x27, 0xcd, 0x2f, 0xc1, 0x15,
	0x1c, 0xd1, 0xfe, 0xa0, 0x56, 0x92, 0x99, 0x77, 0x7f, 0x13, 0xf0, 0xb6, 0x1f, 0xf0, 0xc1, 0xa8,
	0x67, 0xf5, 0xe9, 0xd0, 0xd6, 0x63, 0x50, 0x7f, 0xf6, 0x99, 0xf7, 0xc8, 0xe6, 0x4f, 0x22, 0xcc,
	0xac, 0x23, 0xc2, 0x13, 0x01, 0x55, 0x6a, 0x2a, 0xe0, 0x55, 0x55, 0x40, 0x1e, 0x91, 0xa3, 0x60,
	0xf3, 0x21, 0xb8, 0xa6, 0xca, 0x74, 0x63, 0x7c, 0x82, 0x63, 0x4c, 0xfa, 0xb8, 0x56, 0x96, 0x55,
	0xec, 0x44, 0xc0, 0x73, 0x5c, 0x2a, 0xe0, 0xee, 0x7c, 0x9f, 0x33, 0x06, 0x39, 0x5b, 0x0a, 0x72,
	0x32, 0xc4, 0x74, 0x40, 0x35, 0x7b, 0x84, 0x2e, 0x9d, 0x10, 0x1c, 0xd7, 0xae, 0x48, 0x65, 0x39,
	0xc7, 0x45, 0x66, 0x36, 0xc7, 0x45, 0x1c, 0x39, 0x95, 0x0c, 0xf8, 0x62, 0x7a, 0x36, 0x23, 0x50,
	0x69, 0xdf, 0xeb, 0x74, 0x59, 0xe0, 0x13, 0x97, 0x8f, 0x62, 0x5c, 0x5b, 0x6b, 0x1a, 0xad, 0xcd,
	0xc3, 0x66, 0xf1, 0xf5, 0xb5, 0xef, 0x75, 0x3a, 0x59, 0xcc, 0x11, 0x39, 0xa1, 0xed, 0xb7, 0x12,
	0x01, 0x2b, 0xbd, 0x90, 0xcd, 0x52, 0x53, 0x01, 0xb7, 0x55, 0xcd, 0x05, 0x18, 0x39, 0x57, 0xe7,
	0x93, 0xd1, 0x75, 0xb0, 0x5b, 0x30, 0x91, 0x83, 0x59, 0x44, 0x09, 0xc3, 0xe8, 0xa7, 0x55, 0xb0,
	0x79, 0xcc, 0xfc, 0x07, 0x01, 0x1f, 0x78, 0xb1, 0x3b, 0x31, 0xbf, 0x02, 0x6b, 0xee, 0x90, 0x8e,
	0x08, 0xd7, 0xa6, 0xba, 0x6e, 0xa9, 0x77, 0x62, 0x4d, 0x1d, 0x6a, 0x69, 0x87, 0x5a, 0x77, 0x69,
	0x40, 0xda, 0x9f, 0x3d, 0x13, 0x70, 0x25, 0x11, 0x50, 0x27, 0xa4, 0x02, 0x56, 0x54, 0x2f, 0xea,
	0x8c, 0x7e, 0xfc, 0x1d, 0xb6, 0x2e, 0xf0, 0x8a, 0xa7, 0x5a, 0xcc, 0xd1, 0x22, 0xd3, 0x81, 0x6b,
	0x1b, 0xba, 0x9e, 0x17, 0x63, 0xc6, 0xb4, 0xd5, 0xe6, 0x8d, 0xab, 0x99, 0x73, 0xc6, 0xd5, 0x78,
	0x6e, 0xdc, 0x8f, 0xd4, 0x79, 0xaa, 0xc9, 0xdd, 0xd8, 0x9f, 0xd3, 0x2c, 0xcd, 0x34, 0x17, 0x99,
	0x99, 0xe6, 0x22, 0x8e, 0x9c, 0x8a, 0x02, 0xb4, 0x26, 0xda, 0x01, 0xaf, 0xcc, 0x8d, 0x2d, 0x1f,
	0xe7, 0x53, 0x03, 0x6c, 0x1f, 0x33, 0xff, 0x13, 0x3a, 0x22, 0x9e, 0x5c, 0x01, 0x1f, 0xe3, 0x88,
	0xb2, 0x80, 0xbf, 0xf0, 0xb9, 0xde, 0x01, 0xe5, 0x93, 0x98, 0x0e, 0xf5, 0x34, 0x77, 0x13, 0x01,
	0xe5, 0x39, 0x15, 0x70, 0x53, 0x89, 0x4f, 0x4f, 0xc8, 0x91, 0x20, 0x6a, 0x80, 0x1b, 0xcb, 0x1e,
	0x22, 0x7f, 0xca, 0xbf, 0x4a, 0xd2, 0x50, 0x9d, 0xd0, 0x65, 0x83, 0x80, 0xf8, 0x0e, 0x66, 0x74,
	0x14, 0xf7, 0xf1, 0xe7, 0xd4, 0xc3, 0xe6, 0x87, 0x60, 0x23, 0xb3, 0xbb, 0x5a, 0x4c, 0x1b, 0xed,
	0x9b, 0x89, 0x80, 0x33, 0x30, 0x15, 0xf0, 0xda, 0xe2, 0x3d, 0x61, 0xc8, 0x99, 0xd1, 0x4b, 0xae,
	0xdc, 0xaa, 0x54, 0xb9, 0xcc, 0x95, 0xbb, 0x0f, 0xb6, 0x08, 0xe6, 0x13, 0x1a, 0x3f, 0x2a, 0x58,
	0x60, 0x3f, 0x11, 0xb0, 0x48, 0xa5, 0x02, 0xbe, 0xaa, 0x54, 0x0b, 0x04, 0x72, 0xaa, 0x1a, 0x99,
	0x73, 0x56, 0xc1, 0xad, 0xe5, 0x4b, 0xbb, 0x15, 0x83, 0x75, 0xa6, 0x07, 0xab, 0x97, 0xcd, 0xd1,
	0xff, 0x5a, 0x96, 0x79, 0xf6, 0x6c, 0x21, 0x67, 0x08, 0x72, 0x72, 0xd2, 0x7c, 0x0f, 0xbc, 0xc4,
	0x46, 0x2c, 0xc2, 0xc4, 0x93, 0xfb, 0x67, 0xbd, 0xbd, 0x97, 0x08, 0x98, 0x41, 0xa9, 0x80, 0x55,
	0x9d, 0xaa, 0x00, 0xe4, 0x64, 0x14, 0xba, 0x09, 0xe0, 0x3f, 0xbc, 0xfb, 0xcc, 0x1f, 0x87, 0xbf,
	0x94, 0x41, 0xe9, 0x98, 0xf9, 0xe6, 0x37, 0x06, 0xd8, 0xf9, 0xd4, 0x25, 0x5e, 0x88, 0x8b, 0xdf,
	0x30, 0x58, 0x5c, 0x76, 0x85, 0x80, 0xfa, 0x9b, 0xff, 0x11, 0x90, 0x7b, 0xf1, 0x8d, 0xaf, 0x7f,
	0xfe, 0xf3, 0xbb, 0x55, 0x88, 0xf6, 0xec, 0xc2, 0x47, 0x56, 0x7d, 0xc6, 0xba, 0xca, 0x08, 0xe6,
	0x04, 0xbc, 0x9c, 0x77, 0x92, 0x2f, 0xbb, 0xd7, 0x96, 0x14, 0xc9, 0xc8, 0xfa, 0xeb, 0xff, 0x42,
	0xe6, 0xd5, 0x9b, 0xb2, 0x7a, 0x1d, 0xd5, 0x8a, 0xd5, 0x27, 0x59, 0x8d, 0xef, 0x0d, 0x50, 0xcf,
	0x2b, 0x9f, 0xdf, 0x0b, 0xb7, 0x96, 0x54, 0x39, 0x17, 0x55, 0x7f, 0xe7, 0x22, 0x51, 0x79, 0x53,
	0x6f, 0xcb, 0xa6, 0x6e, 0x21, 0x54, 0x6c, 0xea, 0x24, 0x4f, 0xe9, 0x7a, 0xba, 0xfe, 0x0f, 0x06,
	0xd8, 0xcb, 0xdb, 0x5b, 0x7a, 0xa1, 0x97, 0xbd, 0x89, 0x65, 0x81, 0x75, 0xfb, 0x82, 0x81, 0x79,
	0x9f, 0x96, 0xec, 0xb3, 0x85, 0x6e, 0x17, 0xfb, 0xcc, 0x4c, 0xda, 0x8d, 0x75, 0x5a, 0x97, 0x50,
	0x0f, 0xb7, 0x8f, 0x9e, 0x9d, 0x36, 0x8c, 0xe7, 0xa7, 0x0d, 0xe3, 0x8f, 0xd3, 0x86, 0xf1, 0xed,
	0x59, 0x63, 0xe5, 0xf9, 0x59, 0x63, 0xe5, 0xd7, 0xb3, 0xc6, 0xca, 0x43, 0x7b, 0xee, 0x76, 0x68,
	0x2d, 0x82, 0x79, 0xf6, 0x73, 0xbf, 0x3f, 0x70, 0x03, 0x62, 0x3f, 0x96, 0xf2, 0xf2, 0xaa, 0xf4,
	0xd6, 0xe4, 0xbf, 0x57, 0xef, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x0f, 0x4a, 0x2d, 0xf7,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	HandleMsgVolumeReport(ctx context.Context, in *MsgVolumeReport, opts ...grpc.CallOption) (*MsgVolumeReportResponse, error)
	HandleMsgWithdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	HandleMsgFoundationDeposit(ctx context.Context, in *MsgFoundationDeposit, opts ...grpc.CallOption) (*MsgFoundationDepositResponse, error)
	HandleMsgSlashingResourceNode(ctx context.Context, in *MsgSlashingResourceNode, opts ...grpc.CallOption) (*MsgSlashingResourceNodeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) HandleMsgVolumeReport(ctx context.Context, in *MsgVolumeReport, opts ...grpc.CallOption) (*MsgVolumeReportResponse, error) {
	out := new(MsgVolumeReportResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Msg/HandleMsgVolumeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgWithdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Msg/HandleMsgWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgFoundationDeposit(ctx context.Context, in *MsgFoundationDeposit, opts ...grpc.CallOption) (*MsgFoundationDepositResponse, error) {
	out := new(MsgFoundationDepositResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Msg/HandleMsgFoundationDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgSlashingResourceNode(ctx context.Context, in *MsgSlashingResourceNode, opts ...grpc.CallOption) (*MsgSlashingResourceNodeResponse, error) {
	out := new(MsgSlashingResourceNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Msg/HandleMsgSlashingResourceNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	HandleMsgVolumeReport(context.Context, *MsgVolumeReport) (*MsgVolumeReportResponse, error)
	HandleMsgWithdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	HandleMsgFoundationDeposit(context.Context, *MsgFoundationDeposit) (*MsgFoundationDepositResponse, error)
	HandleMsgSlashingResourceNode(context.Context, *MsgSlashingResourceNode) (*MsgSlashingResourceNodeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) HandleMsgVolumeReport(ctx context.Context, req *MsgVolumeReport) (*MsgVolumeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgVolumeReport not implemented")
}
func (*UnimplementedMsgServer) HandleMsgWithdraw(ctx context.Context, req *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgWithdraw not implemented")
}
func (*UnimplementedMsgServer) HandleMsgFoundationDeposit(ctx context.Context, req *MsgFoundationDeposit) (*MsgFoundationDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgFoundationDeposit not implemented")
}
func (*UnimplementedMsgServer) HandleMsgSlashingResourceNode(ctx context.Context, req *MsgSlashingResourceNode) (*MsgSlashingResourceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgSlashingResourceNode not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_HandleMsgVolumeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVolumeReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgVolumeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Msg/HandleMsgVolumeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgVolumeReport(ctx, req.(*MsgVolumeReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Msg/HandleMsgWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgWithdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgFoundationDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFoundationDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgFoundationDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Msg/HandleMsgFoundationDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgFoundationDeposit(ctx, req.(*MsgFoundationDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgSlashingResourceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSlashingResourceNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgSlashingResourceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Msg/HandleMsgSlashingResourceNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgSlashingResourceNode(ctx, req.(*MsgSlashingResourceNode))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratos.pot.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleMsgVolumeReport",
			Handler:    _Msg_HandleMsgVolumeReport_Handler,
		},
		{
			MethodName: "HandleMsgWithdraw",
			Handler:    _Msg_HandleMsgWithdraw_Handler,
		},
		{
			MethodName: "HandleMsgFoundationDeposit",
			Handler:    _Msg_HandleMsgFoundationDeposit_Handler,
		},
		{
			MethodName: "HandleMsgSlashingResourceNode",
			Handler:    _Msg_HandleMsgSlashingResourceNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stratos/pot/v1/tx.proto",
}

func (m *MsgVolumeReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVolumeReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVolumeReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BLSSignature != nil {
		{
			size, err := m.BLSSignature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReporterOwner) > 0 {
		i -= len(m.ReporterOwner)
		copy(dAtA[i:], m.ReporterOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReporterOwner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReportReference) > 0 {
		i -= len(m.ReportReference)
		copy(dAtA[i:], m.ReportReference)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReportReference)))
		i--
		dAtA[i] = 0x22
	}
	if m.Epoch != nil {
		{
			size := m.Epoch.Size()
			i -= size
			if _, err := m.Epoch.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletVolumes) > 0 {
		for iNdEx := len(m.WalletVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WalletVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgVolumeReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVolumeReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVolumeReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFoundationDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFoundationDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFoundationDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgFoundationDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFoundationDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFoundationDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSlashingResourceNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSlashingResourceNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSlashingResourceNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Suspend {
		i--
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Slashing != nil {
		{
			size := m.Slashing.Size()
			i -= size
			if _, err := m.Slashing.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReporterOwner) > 0 {
		for iNdEx := len(m.ReporterOwner) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReporterOwner[iNdEx])
			copy(dAtA[i:], m.ReporterOwner[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ReporterOwner[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Reporters) > 0 {
		for iNdEx := len(m.Reporters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Reporters[iNdEx])
			copy(dAtA[i:], m.Reporters[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Reporters[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSlashingResourceNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSlashingResourceNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSlashingResourceNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgVolumeReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WalletVolumes) > 0 {
		for _, e := range m.WalletVolumes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReportReference)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReporterOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BLSSignature != nil {
		l = m.BLSSignature.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVolumeReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFoundationDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFoundationDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSlashingResourceNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reporters) > 0 {
		for _, s := range m.Reporters {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ReporterOwner) > 0 {
		for _, s := range m.ReporterOwner {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Slashing != nil {
		l = m.Slashing.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Suspend {
		n += 2
	}
	return n
}

func (m *MsgSlashingResourceNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgVolumeReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVolumeReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVolumeReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletVolumes = append(m.WalletVolumes, &SingleWalletVolume{})
			if err := m.WalletVolumes[len(m.WalletVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Epoch = &v
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportReference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportReference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BLSSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BLSSignature == nil {
				m.BLSSignature = &BLSSignatureInfo{}
			}
			if err := m.BLSSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVolumeReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVolumeReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVolumeReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFoundationDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFoundationDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFoundationDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFoundationDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFoundationDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFoundationDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSlashingResourceNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSlashingResourceNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSlashingResourceNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporters = append(m.Reporters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterOwner = append(m.ReporterOwner, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Slashing = &v
			if err := m.Slashing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSlashingResourceNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSlashingResourceNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSlashingResourceNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
