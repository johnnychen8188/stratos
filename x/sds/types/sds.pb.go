// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/sds/v1/sds.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the Register module parameters
type Params struct {
	BondDenom string `protobuf:"bytes,1,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom" yaml:"bond_denom"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f3959b8649eb2, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

type FileUpload struct {
	FileHash string    `protobuf:"bytes,1,opt,name=fileHash,proto3" json:"file_hash" yaml:"file_hash"`
	FileInfo *FileInfo `protobuf:"bytes,2,opt,name=fileInfo,proto3" json:"file_info" yaml:"file_info"`
}

func (m *FileUpload) Reset()         { *m = FileUpload{} }
func (m *FileUpload) String() string { return proto.CompactTextString(m) }
func (*FileUpload) ProtoMessage()    {}
func (*FileUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f3959b8649eb2, []int{1}
}
func (m *FileUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileUpload.Merge(m, src)
}
func (m *FileUpload) XXX_Size() int {
	return m.Size()
}
func (m *FileUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_FileUpload.DiscardUnknown(m)
}

var xxx_messageInfo_FileUpload proto.InternalMessageInfo

func (m *FileUpload) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *FileUpload) GetFileInfo() *FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type FileInfo struct {
	Height   *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=height,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"height,omitempty"`
	Reporter string                                  `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Uploader string                                  `protobuf:"bytes,3,opt,name=uploader,proto3" json:"uploader,omitempty"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f3959b8649eb2, []int{2}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *FileInfo) GetUploader() string {
	if m != nil {
		return m.Uploader
	}
	return ""
}

type MsgFileUpload struct {
	FileHash string `protobuf:"bytes,1,opt,name=fileHash,proto3" json:"file_hash" yaml:"file_hash"`
	From     string `protobuf:"bytes,2,opt,name=from,proto3" json:"from" yaml:"from"`
	Reporter string `protobuf:"bytes,3,opt,name=reporter,proto3" json:"reporter" yaml:"reporter"`
	Uploader string `protobuf:"bytes,4,opt,name=uploader,proto3" json:"uploader" yaml:"uploader"`
}

func (m *MsgFileUpload) Reset()         { *m = MsgFileUpload{} }
func (m *MsgFileUpload) String() string { return proto.CompactTextString(m) }
func (*MsgFileUpload) ProtoMessage()    {}
func (*MsgFileUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f3959b8649eb2, []int{3}
}
func (m *MsgFileUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFileUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFileUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFileUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFileUpload.Merge(m, src)
}
func (m *MsgFileUpload) XXX_Size() int {
	return m.Size()
}
func (m *MsgFileUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFileUpload.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFileUpload proto.InternalMessageInfo

func (m *MsgFileUpload) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *MsgFileUpload) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgFileUpload) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *MsgFileUpload) GetUploader() string {
	if m != nil {
		return m.Uploader
	}
	return ""
}

type MsgPrepay struct {
	Sender string                                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	Coins  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins" yaml:"coins"`
}

func (m *MsgPrepay) Reset()         { *m = MsgPrepay{} }
func (m *MsgPrepay) String() string { return proto.CompactTextString(m) }
func (*MsgPrepay) ProtoMessage()    {}
func (*MsgPrepay) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f3959b8649eb2, []int{4}
}
func (m *MsgPrepay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPrepay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPrepay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPrepay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPrepay.Merge(m, src)
}
func (m *MsgPrepay) XXX_Size() int {
	return m.Size()
}
func (m *MsgPrepay) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPrepay.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPrepay proto.InternalMessageInfo

func (m *MsgPrepay) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgPrepay) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "stratos.sds.v1.Params")
	proto.RegisterType((*FileUpload)(nil), "stratos.sds.v1.FileUpload")
	proto.RegisterType((*FileInfo)(nil), "stratos.sds.v1.FileInfo")
	proto.RegisterType((*MsgFileUpload)(nil), "stratos.sds.v1.MsgFileUpload")
	proto.RegisterType((*MsgPrepay)(nil), "stratos.sds.v1.MsgPrepay")
}

func init() { proto.RegisterFile("stratos/sds/v1/sds.proto", fileDescriptor_a89f3959b8649eb2) }

var fileDescriptor_a89f3959b8649eb2 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x8b, 0xd3, 0x40,
	0x1c, 0x6d, 0x76, 0xd7, 0xd2, 0x4e, 0x5d, 0xff, 0x04, 0xc1, 0x58, 0x21, 0x53, 0x23, 0x48, 0x51,
	0x36, 0xa1, 0xbb, 0x37, 0x17, 0x2f, 0x51, 0x16, 0x0b, 0x2e, 0x2c, 0x01, 0x11, 0xbc, 0x2c, 0xd3,
	0x76, 0x9a, 0x04, 0x9b, 0x4c, 0x99, 0x99, 0x2d, 0xd6, 0x0f, 0xe0, 0xd9, 0x0f, 0xe1, 0xc9, 0xcf,
	0xe0, 0x07, 0xd8, 0xe3, 0x1e, 0xc5, 0xc3, 0x28, 0xed, 0x2d, 0xc7, 0x80, 0x77, 0x99, 0x3f, 0x4d,
	0xa3, 0x27, 0x0f, 0x9e, 0x66, 0x7e, 0xef, 0xcd, 0x7b, 0xfc, 0xde, 0xcc, 0x6f, 0x80, 0xc3, 0x38,
	0x45, 0x9c, 0xb0, 0x80, 0x4d, 0x58, 0xb0, 0x18, 0xc8, 0xc5, 0x9f, 0x53, 0xc2, 0x89, 0x7d, 0xc3,
	0x30, 0xbe, 0x84, 0x16, 0x83, 0xee, 0x9d, 0x98, 0xc4, 0x44, 0x51, 0x81, 0xdc, 0xe9, 0x53, 0x5d,
	0x77, 0x4c, 0x58, 0x46, 0x58, 0x30, 0x42, 0x0c, 0x07, 0x8b, 0xc1, 0x08, 0x73, 0x34, 0x08, 0xc6,
	0x24, 0xcd, 0x35, 0xef, 0xbd, 0x02, 0xcd, 0x33, 0x44, 0x51, 0xc6, 0xec, 0x10, 0x80, 0x11, 0xc9,
	0x27, 0xe7, 0x13, 0x9c, 0x93, 0xcc, 0xb1, 0x7a, 0x56, 0xbf, 0x1d, 0x3e, 0x2c, 0x04, 0xac, 0xa1,
	0xa5, 0x80, 0xb7, 0x97, 0x28, 0x9b, 0x3d, 0xf5, 0xb6, 0x98, 0x17, 0xb5, 0x65, 0xf1, 0x42, 0xed,
	0x3f, 0x5b, 0x00, 0x9c, 0xa4, 0x33, 0xfc, 0x7a, 0x3e, 0x23, 0x68, 0x62, 0x3f, 0x03, 0xad, 0x69,
	0x3a, 0xc3, 0x2f, 0x11, 0x4b, 0x8c, 0xe1, 0x83, 0x42, 0xc0, 0xb6, 0xc4, 0xce, 0x13, 0xc4, 0x92,
	0x52, 0xc0, 0x5b, 0xda, 0xaf, 0x82, 0xbc, 0xa8, 0x92, 0xd8, 0x6f, 0xb4, 0x7c, 0x98, 0x4f, 0x89,
	0xb3, 0xd3, 0xb3, 0xfa, 0x9d, 0x43, 0xc7, 0xff, 0x33, 0xb4, 0x7f, 0x62, 0xf8, 0x9a, 0x71, 0x9a,
	0x4f, 0xc9, 0x5f, 0xc6, 0x12, 0x32, 0xc6, 0xf2, 0xb0, 0xf7, 0xd1, 0x02, 0xad, 0x8d, 0xd2, 0x0e,
	0x41, 0x33, 0xc1, 0x69, 0x9c, 0x70, 0xd3, 0xe2, 0xe3, 0xef, 0x02, 0x3e, 0x8a, 0x53, 0x9e, 0x5c,
	0x8c, 0xfc, 0x31, 0xc9, 0x02, 0x73, 0x81, 0x7a, 0x39, 0x60, 0x93, 0x77, 0x01, 0x5f, 0xce, 0x31,
	0xf3, 0x87, 0x39, 0x8f, 0x8c, 0xd2, 0xee, 0x82, 0x16, 0xc5, 0x73, 0x42, 0x39, 0xa6, 0xaa, 0xd3,
	0x76, 0x54, 0xd5, 0x92, 0xbb, 0x50, 0xd7, 0x81, 0xa9, 0xb3, 0xab, 0xb9, 0x4d, 0xed, 0xfd, 0xb2,
	0xc0, 0xfe, 0x29, 0x8b, 0xff, 0xdf, 0x95, 0x3d, 0x01, 0x7b, 0x53, 0x4a, 0x32, 0xdd, 0x44, 0x78,
	0xb7, 0x10, 0x50, 0xd5, 0xa5, 0x80, 0x1d, 0xa3, 0xa2, 0xf2, 0xc9, 0x14, 0x68, 0x1f, 0xd7, 0xba,
	0x56, 0x9d, 0x85, 0xb0, 0x10, 0xb0, 0xc2, 0x4a, 0x01, 0x6f, 0x6a, 0xd1, 0x06, 0xf1, 0x6a, 0xb1,
	0x8e, 0x6b, 0xb1, 0xf6, 0xb6, 0xe2, 0x0d, 0xb6, 0x15, 0x57, 0x61, 0x6b, 0xb9, 0xbf, 0x5a, 0xa0,
	0x7d, 0xca, 0xe2, 0x33, 0x8a, 0xe7, 0x68, 0x69, 0x1f, 0x81, 0x26, 0xc3, 0xb9, 0x34, 0xd2, 0x89,
	0xef, 0x17, 0x02, 0x1a, 0xa4, 0x14, 0x70, 0x5f, 0xdb, 0xe8, 0xda, 0x8b, 0x0c, 0x61, 0x7f, 0x00,
	0xd7, 0xe4, 0x18, 0x33, 0x67, 0xa7, 0xb7, 0xdb, 0xef, 0x1c, 0xde, 0xf3, 0xf5, 0x03, 0xf9, 0x72,
	0xd0, 0x7d, 0x33, 0xe8, 0xfe, 0x73, 0x92, 0xe6, 0xe1, 0xf0, 0x52, 0xc0, 0x46, 0x21, 0xa0, 0x3e,
	0x5f, 0x0a, 0x78, 0x5d, 0x3b, 0xaa, 0xd2, 0xfb, 0xf2, 0x03, 0xf6, 0xff, 0xe1, 0xb5, 0xa5, 0x13,
	0x8b, 0xb4, 0x45, 0x38, 0xbc, 0x5c, 0xb9, 0xd6, 0xd5, 0xca, 0xb5, 0x7e, 0xae, 0x5c, 0xeb, 0xd3,
	0xda, 0x6d, 0x5c, 0xad, 0xdd, 0xc6, 0xb7, 0xb5, 0xdb, 0x78, 0x1b, 0xd4, 0xac, 0xcc, 0xa8, 0xe6,
	0x98, 0x6f, 0xb6, 0x07, 0xe3, 0x04, 0xa5, 0x79, 0xf0, 0x5e, 0x7d, 0x66, 0xe5, 0x3b, 0x6a, 0xaa,
	0x6f, 0x78, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x49, 0xe4, 0xaa, 0x02, 0xe8, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintSds(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileInfo != nil {
		{
			size, err := m.FileInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintSds(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uploader) > 0 {
		i -= len(m.Uploader)
		copy(dAtA[i:], m.Uploader)
		i = encodeVarintSds(dAtA, i, uint64(len(m.Uploader)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintSds(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != nil {
		{
			size := m.Height.Size()
			i -= size
			if _, err := m.Height.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintSds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFileUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFileUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFileUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uploader) > 0 {
		i -= len(m.Uploader)
		copy(dAtA[i:], m.Uploader)
		i = encodeVarintSds(dAtA, i, uint64(len(m.Uploader)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintSds(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintSds(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintSds(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPrepay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPrepay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPrepay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintSds(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSds(dAtA []byte, offset int, v uint64) int {
	offset -= sovSds(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	return n
}

func (m *FileUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	if m.FileInfo != nil {
		l = m.FileInfo.Size()
		n += 1 + l + sovSds(uint64(l))
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovSds(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	l = len(m.Uploader)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	return n
}

func (m *MsgFileUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	l = len(m.Uploader)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	return n
}

func (m *MsgPrepay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovSds(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovSds(uint64(l))
		}
	}
	return n
}

func sovSds(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSds(x uint64) (n int) {
	return sovSds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileInfo == nil {
				m.FileInfo = &FileInfo{}
			}
			if err := m.FileInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Height = &v
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uploader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uploader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFileUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFileUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFileUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uploader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uploader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPrepay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPrepay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPrepay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSds
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSds
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSds
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSds        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSds          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSds = fmt.Errorf("proto: unexpected end of group")
)
