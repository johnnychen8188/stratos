// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/register/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateResourceNode encapsulates an MsgCreateResourceNodeTx transaction as an SDK message.
type MsgCreateResourceNode struct {
	NetworkAddress string       `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey         *types.Any   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Value          types1.Coin  `protobuf:"bytes,3,opt,name=value,proto3" json:"value" yaml:"value"`
	OwnerAddress   string       `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	Description    *Description `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	NodeType       string       `protobuf:"bytes,6,opt,name=node_type,json=nodeType,proto3" json:"node_type" yaml:"node_type"`
}

func (m *MsgCreateResourceNode) Reset()         { *m = MsgCreateResourceNode{} }
func (m *MsgCreateResourceNode) String() string { return proto.CompactTextString(m) }
func (*MsgCreateResourceNode) ProtoMessage()    {}
func (*MsgCreateResourceNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{0}
}
func (m *MsgCreateResourceNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateResourceNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateResourceNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateResourceNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateResourceNode.Merge(m, src)
}
func (m *MsgCreateResourceNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateResourceNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateResourceNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateResourceNode proto.InternalMessageInfo

func (m *MsgCreateResourceNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *MsgCreateResourceNode) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *MsgCreateResourceNode) GetValue() types1.Coin {
	if m != nil {
		return m.Value
	}
	return types1.Coin{}
}

func (m *MsgCreateResourceNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCreateResourceNode) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *MsgCreateResourceNode) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

// MsgCreateResourceNodeResponse defines the CreateResourceNodeTx response type
type MsgCreateResourceNodeResponse struct {
}

func (m *MsgCreateResourceNodeResponse) Reset()         { *m = MsgCreateResourceNodeResponse{} }
func (m *MsgCreateResourceNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateResourceNodeResponse) ProtoMessage()    {}
func (*MsgCreateResourceNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{1}
}
func (m *MsgCreateResourceNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateResourceNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateResourceNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateResourceNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateResourceNodeResponse.Merge(m, src)
}
func (m *MsgCreateResourceNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateResourceNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateResourceNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateResourceNodeResponse proto.InternalMessageInfo

// MsgCreateIndexingNode encapsulates an MsgCreateIndexingNodeTx transaction as an SDK message.
type MsgCreateIndexingNode struct {
	NetworkAddress string       `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey         *types.Any   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Value          types1.Coin  `protobuf:"bytes,3,opt,name=value,proto3" json:"value" yaml:"value"`
	OwnerAddress   string       `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	Description    *Description `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
}

func (m *MsgCreateIndexingNode) Reset()         { *m = MsgCreateIndexingNode{} }
func (m *MsgCreateIndexingNode) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIndexingNode) ProtoMessage()    {}
func (*MsgCreateIndexingNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{2}
}
func (m *MsgCreateIndexingNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIndexingNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIndexingNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIndexingNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIndexingNode.Merge(m, src)
}
func (m *MsgCreateIndexingNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIndexingNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIndexingNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIndexingNode proto.InternalMessageInfo

func (m *MsgCreateIndexingNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *MsgCreateIndexingNode) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *MsgCreateIndexingNode) GetValue() types1.Coin {
	if m != nil {
		return m.Value
	}
	return types1.Coin{}
}

func (m *MsgCreateIndexingNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCreateIndexingNode) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

// MsgCreateIndexingNodeResponse defines the CreateIndexingNode response type
type MsgCreateIndexingNodeResponse struct {
}

func (m *MsgCreateIndexingNodeResponse) Reset()         { *m = MsgCreateIndexingNodeResponse{} }
func (m *MsgCreateIndexingNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIndexingNodeResponse) ProtoMessage()    {}
func (*MsgCreateIndexingNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{3}
}
func (m *MsgCreateIndexingNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIndexingNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIndexingNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIndexingNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIndexingNodeResponse.Merge(m, src)
}
func (m *MsgCreateIndexingNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIndexingNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIndexingNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIndexingNodeResponse proto.InternalMessageInfo

// MsgRemoveResourceNode - encapsulates an RemoveResourceNode transaction as an SDK message
type MsgRemoveResourceNode struct {
	ResourceNodeAddress string `protobuf:"bytes,1,opt,name=resource_node_address,json=resourceNodeAddress,proto3" json:"resource_node_address" yaml:"resource_node_address"`
	OwnerAddress        string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
}

func (m *MsgRemoveResourceNode) Reset()         { *m = MsgRemoveResourceNode{} }
func (m *MsgRemoveResourceNode) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveResourceNode) ProtoMessage()    {}
func (*MsgRemoveResourceNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{4}
}
func (m *MsgRemoveResourceNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveResourceNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveResourceNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveResourceNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveResourceNode.Merge(m, src)
}
func (m *MsgRemoveResourceNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveResourceNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveResourceNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveResourceNode proto.InternalMessageInfo

// MsgRemoveResourceNodeResponse defines the Msg/RemoveResourceNode response type.
type MsgRemoveResourceNodeResponse struct {
}

func (m *MsgRemoveResourceNodeResponse) Reset()         { *m = MsgRemoveResourceNodeResponse{} }
func (m *MsgRemoveResourceNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveResourceNodeResponse) ProtoMessage()    {}
func (*MsgRemoveResourceNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{5}
}
func (m *MsgRemoveResourceNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveResourceNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveResourceNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveResourceNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveResourceNodeResponse.Merge(m, src)
}
func (m *MsgRemoveResourceNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveResourceNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveResourceNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveResourceNodeResponse proto.InternalMessageInfo

// MsgRemoveIndexingNode - encapsulates an MsgRemoveIndexingNode transaction as an SDK message
type MsgRemoveIndexingNode struct {
	IndexingNodeAddress string `protobuf:"bytes,1,opt,name=indexing_node_address,json=indexingNodeAddress,proto3" json:"indexing_node_address" yaml:"indexing_node_address"`
	OwnerAddress        string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
}

func (m *MsgRemoveIndexingNode) Reset()         { *m = MsgRemoveIndexingNode{} }
func (m *MsgRemoveIndexingNode) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveIndexingNode) ProtoMessage()    {}
func (*MsgRemoveIndexingNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{6}
}
func (m *MsgRemoveIndexingNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveIndexingNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveIndexingNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveIndexingNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveIndexingNode.Merge(m, src)
}
func (m *MsgRemoveIndexingNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveIndexingNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveIndexingNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveIndexingNode proto.InternalMessageInfo

// MsgRemoveIndexingNodeResponse defines the Msg/RemoveIndexingNode response type.
type MsgRemoveIndexingNodeResponse struct {
}

func (m *MsgRemoveIndexingNodeResponse) Reset()         { *m = MsgRemoveIndexingNodeResponse{} }
func (m *MsgRemoveIndexingNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveIndexingNodeResponse) ProtoMessage()    {}
func (*MsgRemoveIndexingNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{7}
}
func (m *MsgRemoveIndexingNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveIndexingNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveIndexingNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveIndexingNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveIndexingNodeResponse.Merge(m, src)
}
func (m *MsgRemoveIndexingNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveIndexingNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveIndexingNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveIndexingNodeResponse proto.InternalMessageInfo

// MsgUpdateResourceNode defines a SDK message for updating an existing resource node.
type MsgUpdateResourceNode struct {
	Description    Description `protobuf:"bytes,1,opt,name=description,proto3" json:"description" yaml:"description"`
	NetworkAddress string      `protobuf:"bytes,2,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	OwnerAddress   string      `protobuf:"bytes,3,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	NodeType       string      `protobuf:"bytes,4,opt,name=node_type,json=nodeType,proto3" json:"node_type" yaml:"node_type"`
}

func (m *MsgUpdateResourceNode) Reset()         { *m = MsgUpdateResourceNode{} }
func (m *MsgUpdateResourceNode) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResourceNode) ProtoMessage()    {}
func (*MsgUpdateResourceNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{8}
}
func (m *MsgUpdateResourceNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResourceNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResourceNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResourceNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResourceNode.Merge(m, src)
}
func (m *MsgUpdateResourceNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResourceNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResourceNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResourceNode proto.InternalMessageInfo

// MsgUpdateResourceNodeResponse defines the Msg/UpdateResourceNode response type.
type MsgUpdateResourceNodeResponse struct {
}

func (m *MsgUpdateResourceNodeResponse) Reset()         { *m = MsgUpdateResourceNodeResponse{} }
func (m *MsgUpdateResourceNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResourceNodeResponse) ProtoMessage()    {}
func (*MsgUpdateResourceNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{9}
}
func (m *MsgUpdateResourceNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResourceNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResourceNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResourceNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResourceNodeResponse.Merge(m, src)
}
func (m *MsgUpdateResourceNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResourceNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResourceNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResourceNodeResponse proto.InternalMessageInfo

// MsgUpdateIndexingNode defines a SDK message for updating an existing indexing node.
type MsgUpdateIndexingNode struct {
	Description    Description `protobuf:"bytes,1,opt,name=description,proto3" json:"description" yaml:"description"`
	NetworkAddress string      `protobuf:"bytes,2,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	OwnerAddress   string      `protobuf:"bytes,3,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
}

func (m *MsgUpdateIndexingNode) Reset()         { *m = MsgUpdateIndexingNode{} }
func (m *MsgUpdateIndexingNode) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIndexingNode) ProtoMessage()    {}
func (*MsgUpdateIndexingNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{10}
}
func (m *MsgUpdateIndexingNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIndexingNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIndexingNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIndexingNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIndexingNode.Merge(m, src)
}
func (m *MsgUpdateIndexingNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIndexingNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIndexingNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIndexingNode proto.InternalMessageInfo

// MsgUpdateIndexingNodeResponse defines the Msg/UpdateIndexingNode response type.
type MsgUpdateIndexingNodeResponse struct {
}

func (m *MsgUpdateIndexingNodeResponse) Reset()         { *m = MsgUpdateIndexingNodeResponse{} }
func (m *MsgUpdateIndexingNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIndexingNodeResponse) ProtoMessage()    {}
func (*MsgUpdateIndexingNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{11}
}
func (m *MsgUpdateIndexingNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIndexingNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIndexingNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIndexingNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIndexingNodeResponse.Merge(m, src)
}
func (m *MsgUpdateIndexingNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIndexingNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIndexingNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIndexingNodeResponse proto.InternalMessageInfo

// MsgUpdateResourceNodeStake defines a SDK message for updating the stake of an existing resource node.
type MsgUpdateResourceNodeStake struct {
	NetworkAddress string       `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	OwnerAddress   string       `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	IncrStake      bool         `protobuf:"varint,3,opt,name=incr_stake,json=incrStake,proto3" json:"incr_stake" yaml:"incr_stake"`
	StakeDelta     *types1.Coin `protobuf:"bytes,4,opt,name=stake_delta,json=stakeDelta,proto3" json:"stake_delta" yaml:"stake_delta"`
}

func (m *MsgUpdateResourceNodeStake) Reset()         { *m = MsgUpdateResourceNodeStake{} }
func (m *MsgUpdateResourceNodeStake) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResourceNodeStake) ProtoMessage()    {}
func (*MsgUpdateResourceNodeStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{12}
}
func (m *MsgUpdateResourceNodeStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResourceNodeStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResourceNodeStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResourceNodeStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResourceNodeStake.Merge(m, src)
}
func (m *MsgUpdateResourceNodeStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResourceNodeStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResourceNodeStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResourceNodeStake proto.InternalMessageInfo

// MsgUpdateResourceNodeStakeResponse defines the Msg/UpdateResourceNodeStake response type.
type MsgUpdateResourceNodeStakeResponse struct {
}

func (m *MsgUpdateResourceNodeStakeResponse) Reset()         { *m = MsgUpdateResourceNodeStakeResponse{} }
func (m *MsgUpdateResourceNodeStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResourceNodeStakeResponse) ProtoMessage()    {}
func (*MsgUpdateResourceNodeStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{13}
}
func (m *MsgUpdateResourceNodeStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResourceNodeStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResourceNodeStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResourceNodeStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResourceNodeStakeResponse.Merge(m, src)
}
func (m *MsgUpdateResourceNodeStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResourceNodeStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResourceNodeStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResourceNodeStakeResponse proto.InternalMessageInfo

// MsgUpdateIndexingNodeStake defines a SDK message for updating the stake of an existing indexing node.
type MsgUpdateIndexingNodeStake struct {
	NetworkAddress string       `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	OwnerAddress   string       `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	IncrStake      bool         `protobuf:"varint,3,opt,name=incr_stake,json=incrStake,proto3" json:"incr_stake" yaml:"incr_stake"`
	StakeDelta     *types1.Coin `protobuf:"bytes,4,opt,name=stake_delta,json=stakeDelta,proto3" json:"stake_delta" yaml:"stake_delta"`
}

func (m *MsgUpdateIndexingNodeStake) Reset()         { *m = MsgUpdateIndexingNodeStake{} }
func (m *MsgUpdateIndexingNodeStake) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIndexingNodeStake) ProtoMessage()    {}
func (*MsgUpdateIndexingNodeStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{14}
}
func (m *MsgUpdateIndexingNodeStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIndexingNodeStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIndexingNodeStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIndexingNodeStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIndexingNodeStake.Merge(m, src)
}
func (m *MsgUpdateIndexingNodeStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIndexingNodeStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIndexingNodeStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIndexingNodeStake proto.InternalMessageInfo

// MsgUpdateResourceNodeStakeResponse defines the Msg/UpdateResourceNodeStake response type.
type MsgUpdateIndexingNodeStakeResponse struct {
}

func (m *MsgUpdateIndexingNodeStakeResponse) Reset()         { *m = MsgUpdateIndexingNodeStakeResponse{} }
func (m *MsgUpdateIndexingNodeStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIndexingNodeStakeResponse) ProtoMessage()    {}
func (*MsgUpdateIndexingNodeStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{15}
}
func (m *MsgUpdateIndexingNodeStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIndexingNodeStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIndexingNodeStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIndexingNodeStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIndexingNodeStakeResponse.Merge(m, src)
}
func (m *MsgUpdateIndexingNodeStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIndexingNodeStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIndexingNodeStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIndexingNodeStakeResponse proto.InternalMessageInfo

// MsgIndexingNodeRegistrationVote defines a SDK message for registration vote of an existing indexing node.
type MsgIndexingNodeRegistrationVote struct {
	CandidateNetworkAddress string `protobuf:"bytes,1,opt,name=candidate_network_address,json=candidateNetworkAddress,proto3" json:"candidate_network_address" yaml:"candidate_network_address"`
	CandidateOwnerAddress   string `protobuf:"bytes,2,opt,name=candidate_owner_address,json=candidateOwnerAddress,proto3" json:"candidate_owner_address" yaml:"candidate_owner_address"`
	Opinion                 bool   `protobuf:"varint,3,opt,name=opinion,proto3" json:"opinion" yaml:"opinion"`
	VoterNetworkAddress     string `protobuf:"bytes,4,opt,name=voter_network_address,json=voterNetworkAddress,proto3" json:"voter_network_address" yaml:"voter_network_address"`
	VoterOwnerAddress       string `protobuf:"bytes,5,opt,name=voter_owner_address,json=voterOwnerAddress,proto3" json:"voter_owner_address" yaml:"voter_owner_address"`
}

func (m *MsgIndexingNodeRegistrationVote) Reset()         { *m = MsgIndexingNodeRegistrationVote{} }
func (m *MsgIndexingNodeRegistrationVote) String() string { return proto.CompactTextString(m) }
func (*MsgIndexingNodeRegistrationVote) ProtoMessage()    {}
func (*MsgIndexingNodeRegistrationVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{16}
}
func (m *MsgIndexingNodeRegistrationVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIndexingNodeRegistrationVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIndexingNodeRegistrationVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIndexingNodeRegistrationVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIndexingNodeRegistrationVote.Merge(m, src)
}
func (m *MsgIndexingNodeRegistrationVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgIndexingNodeRegistrationVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIndexingNodeRegistrationVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIndexingNodeRegistrationVote proto.InternalMessageInfo

// MsgUpdateResourceNodeStakeResponse defines the Msg/IndexingNodeRegistrationVote response type.
type MsgIndexingNodeRegistrationVoteResponse struct {
}

func (m *MsgIndexingNodeRegistrationVoteResponse) Reset() {
	*m = MsgIndexingNodeRegistrationVoteResponse{}
}
func (m *MsgIndexingNodeRegistrationVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIndexingNodeRegistrationVoteResponse) ProtoMessage()    {}
func (*MsgIndexingNodeRegistrationVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d4b90d7a185a31, []int{17}
}
func (m *MsgIndexingNodeRegistrationVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIndexingNodeRegistrationVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIndexingNodeRegistrationVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIndexingNodeRegistrationVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIndexingNodeRegistrationVoteResponse.Merge(m, src)
}
func (m *MsgIndexingNodeRegistrationVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIndexingNodeRegistrationVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIndexingNodeRegistrationVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIndexingNodeRegistrationVoteResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateResourceNode)(nil), "stratos.register.v1.MsgCreateResourceNode")
	proto.RegisterType((*MsgCreateResourceNodeResponse)(nil), "stratos.register.v1.MsgCreateResourceNodeResponse")
	proto.RegisterType((*MsgCreateIndexingNode)(nil), "stratos.register.v1.MsgCreateIndexingNode")
	proto.RegisterType((*MsgCreateIndexingNodeResponse)(nil), "stratos.register.v1.MsgCreateIndexingNodeResponse")
	proto.RegisterType((*MsgRemoveResourceNode)(nil), "stratos.register.v1.MsgRemoveResourceNode")
	proto.RegisterType((*MsgRemoveResourceNodeResponse)(nil), "stratos.register.v1.MsgRemoveResourceNodeResponse")
	proto.RegisterType((*MsgRemoveIndexingNode)(nil), "stratos.register.v1.MsgRemoveIndexingNode")
	proto.RegisterType((*MsgRemoveIndexingNodeResponse)(nil), "stratos.register.v1.MsgRemoveIndexingNodeResponse")
	proto.RegisterType((*MsgUpdateResourceNode)(nil), "stratos.register.v1.MsgUpdateResourceNode")
	proto.RegisterType((*MsgUpdateResourceNodeResponse)(nil), "stratos.register.v1.MsgUpdateResourceNodeResponse")
	proto.RegisterType((*MsgUpdateIndexingNode)(nil), "stratos.register.v1.MsgUpdateIndexingNode")
	proto.RegisterType((*MsgUpdateIndexingNodeResponse)(nil), "stratos.register.v1.MsgUpdateIndexingNodeResponse")
	proto.RegisterType((*MsgUpdateResourceNodeStake)(nil), "stratos.register.v1.MsgUpdateResourceNodeStake")
	proto.RegisterType((*MsgUpdateResourceNodeStakeResponse)(nil), "stratos.register.v1.MsgUpdateResourceNodeStakeResponse")
	proto.RegisterType((*MsgUpdateIndexingNodeStake)(nil), "stratos.register.v1.MsgUpdateIndexingNodeStake")
	proto.RegisterType((*MsgUpdateIndexingNodeStakeResponse)(nil), "stratos.register.v1.MsgUpdateIndexingNodeStakeResponse")
	proto.RegisterType((*MsgIndexingNodeRegistrationVote)(nil), "stratos.register.v1.MsgIndexingNodeRegistrationVote")
	proto.RegisterType((*MsgIndexingNodeRegistrationVoteResponse)(nil), "stratos.register.v1.MsgIndexingNodeRegistrationVoteResponse")
}

func init() { proto.RegisterFile("stratos/register/v1/tx.proto", fileDescriptor_75d4b90d7a185a31) }

var fileDescriptor_75d4b90d7a185a31 = []byte{
	// 1233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0xe3, 0xc4,
	0x1b, 0xae, 0xd3, 0xb4, 0xbf, 0x76, 0xba, 0xdd, 0x1f, 0x9b, 0xb6, 0xd0, 0x86, 0x36, 0x53, 0x06,
	0x56, 0x6c, 0x41, 0xb5, 0x95, 0x6e, 0xa1, 0x62, 0xb5, 0x20, 0x35, 0xbb, 0x07, 0x10, 0x6a, 0x41,
	0x06, 0xf6, 0xc0, 0x25, 0x72, 0x92, 0x21, 0x6b, 0xb5, 0xf1, 0x44, 0xb6, 0x93, 0x6d, 0x0e, 0x5c,
	0x38, 0x71, 0x44, 0xe2, 0x8c, 0x84, 0xc4, 0x3f, 0xb0, 0x87, 0xfd, 0x17, 0x90, 0x56, 0x9c, 0x56,
	0xe2, 0x02, 0x12, 0x8c, 0x50, 0xcb, 0x01, 0xf9, 0x86, 0x05, 0x77, 0xe4, 0x19, 0xdb, 0xf1, 0xc7,
	0xd8, 0x71, 0xf7, 0x83, 0x03, 0xea, 0x2d, 0xf3, 0x7e, 0x78, 0x9e, 0xf7, 0x7d, 0x1e, 0xcf, 0xbc,
	0x0e, 0x58, 0xb7, 0x6c, 0x53, 0xb3, 0x89, 0xa5, 0x98, 0xb8, 0xab, 0x5b, 0x36, 0x36, 0x95, 0x61,
	0x5d, 0xb1, 0x4f, 0xe4, 0xbe, 0x49, 0x6c, 0x52, 0x59, 0xf2, 0xbd, 0x72, 0xe0, 0x95, 0x87, 0xf5,
	0xea, 0x72, 0x97, 0x74, 0x09, 0xf3, 0x2b, 0xde, 0x2f, 0x1e, 0x5a, 0x5d, 0xeb, 0x12, 0xd2, 0x3d,
	0xc6, 0x0a, 0x5b, 0xb5, 0x06, 0x9f, 0x29, 0x9a, 0x31, 0xf2, 0x5d, 0xeb, 0xbe, 0x4b, 0xeb, 0xeb,
	0x8a, 0x66, 0x18, 0xc4, 0xd6, 0x6c, 0x9d, 0x18, 0x56, 0x90, 0xd8, 0x26, 0x56, 0x8f, 0x58, 0x4d,
	0xfe, 0x44, 0xbe, 0xf0, 0x5d, 0x48, 0x04, 0x2e, 0x84, 0xc2, 0x63, 0x6a, 0x3c, 0x43, 0x69, 0x69,
	0x16, 0x56, 0x86, 0xf5, 0x16, 0xb6, 0xb5, 0xba, 0xd2, 0x26, 0xba, 0xc1, 0xfd, 0xe8, 0x9b, 0x32,
	0x58, 0x39, 0xb0, 0xba, 0xb7, 0x4c, 0xac, 0xd9, 0x58, 0xc5, 0x16, 0x19, 0x98, 0x6d, 0x7c, 0x48,
	0x3a, 0xb8, 0x72, 0x07, 0xfc, 0xdf, 0xc0, 0xf6, 0x3d, 0x62, 0x1e, 0x35, 0xb5, 0x4e, 0xc7, 0xc4,
	0x96, 0xb5, 0x2a, 0x6d, 0x4a, 0xd7, 0xe6, 0x1b, 0xdb, 0x0e, 0x85, 0x49, 0x97, 0x4b, 0xe1, 0xf3,
	0x23, 0xad, 0x77, 0x7c, 0x03, 0x25, 0x1c, 0x48, 0xbd, 0xec, 0x5b, 0xf6, 0xb9, 0xa1, 0xa2, 0x81,
	0xd9, 0xfe, 0xa0, 0x75, 0x84, 0x47, 0xab, 0xa5, 0x4d, 0xe9, 0xda, 0xc2, 0xce, 0xb2, 0xcc, 0xeb,
	0x97, 0x83, 0xd6, 0xc8, 0xfb, 0xc6, 0xa8, 0x71, 0xdd, 0xa1, 0xd0, 0x8f, 0x73, 0x29, 0x5c, 0xe4,
	0xcf, 0xe6, 0x6b, 0xf4, 0xc3, 0x83, 0xed, 0x65, 0xbf, 0x11, 0x6d, 0x73, 0xd4, 0xb7, 0x89, 0xfc,
	0xe1, 0xa0, 0xf5, 0x3e, 0x1e, 0xa9, 0x7e, 0x42, 0xe5, 0x10, 0xcc, 0x0c, 0xb5, 0xe3, 0x01, 0x5e,
	0x9d, 0x66, 0x3b, 0xac, 0xc9, 0x7e, 0xb4, 0xd7, 0x04, 0xd9, 0x6f, 0x82, 0x7c, 0x8b, 0xe8, 0x46,
	0x63, 0xe3, 0x21, 0x85, 0x53, 0x0e, 0x85, 0x3c, 0xde, 0xa5, 0xf0, 0x12, 0xdf, 0x89, 0x2d, 0x91,
	0xca, 0xcd, 0x95, 0x43, 0xb0, 0x48, 0xee, 0x19, 0xd8, 0x0c, 0x1b, 0x51, 0x66, 0x8d, 0xd8, 0x72,
	0x28, 0x8c, 0x3b, 0x5c, 0x0a, 0x97, 0xf9, 0x03, 0x62, 0x66, 0xa4, 0x5e, 0x62, 0xeb, 0xa0, 0x05,
	0x3a, 0x58, 0xe8, 0x60, 0xab, 0x6d, 0xea, 0x7d, 0x8f, 0xe9, 0xd5, 0x19, 0x86, 0x72, 0x53, 0x16,
	0xa8, 0x49, 0xbe, 0x3d, 0x8e, 0x6b, 0x5c, 0x75, 0x28, 0x8c, 0x26, 0xba, 0x14, 0x56, 0xf8, 0x6e,
	0x11, 0x23, 0x52, 0xa3, 0x21, 0x95, 0x77, 0xc0, 0xbc, 0x41, 0x3a, 0xb8, 0x69, 0x8f, 0xfa, 0x78,
	0x75, 0x96, 0xc1, 0x7e, 0xc9, 0xa1, 0x70, 0x6c, 0x74, 0x29, 0x7c, 0xce, 0x67, 0x2e, 0x30, 0x21,
	0x75, 0xce, 0xfb, 0xfd, 0xb1, 0xf7, 0x13, 0x82, 0x0d, 0xa1, 0x3c, 0x54, 0x6c, 0xf5, 0x89, 0x61,
	0x61, 0xf4, 0xeb, 0x74, 0x44, 0x40, 0xef, 0x19, 0x1d, 0x7c, 0xa2, 0x1b, 0xdd, 0x0b, 0x01, 0xfd,
	0x57, 0x04, 0x14, 0x13, 0x40, 0x94, 0xde, 0x50, 0x00, 0xbf, 0x48, 0x4c, 0x00, 0x2a, 0xee, 0x91,
	0x61, 0xfc, 0x04, 0xe9, 0x81, 0x15, 0xd3, 0x5f, 0x37, 0x99, 0xb8, 0xe2, 0x32, 0x78, 0xcb, 0xa1,
	0x50, 0x1c, 0xe0, 0x52, 0xb8, 0xce, 0x71, 0x09, 0xdd, 0x48, 0x5d, 0x32, 0x23, 0xfb, 0x04, 0x4d,
	0x49, 0x35, 0xb9, 0xf4, 0x44, 0x4d, 0xbe, 0x51, 0xfe, 0xf2, 0x5b, 0x38, 0xe5, 0xd7, 0x9f, 0xae,
	0x4e, 0x5c, 0x7f, 0xec, 0x05, 0xe8, 0x81, 0x15, 0xdd, 0x5f, 0x67, 0xd6, 0x2f, 0x0c, 0x18, 0xd7,
	0x2f, 0x74, 0x23, 0x75, 0x49, 0x8f, 0xec, 0xf3, 0xef, 0xd5, 0x2f, 0xe4, 0xff, 0xaf, 0x12, 0xab,
	0xff, 0x93, 0x7e, 0x27, 0x79, 0x83, 0xf4, 0xe2, 0x2a, 0x95, 0x0a, 0xaa, 0x74, 0xcb, 0x7f, 0xa5,
	0xce, 0x7b, 0xd4, 0x09, 0xce, 0x9b, 0xd2, 0xd3, 0x38, 0x6f, 0x52, 0x7d, 0x9d, 0x7e, 0xb2, 0x97,
	0x37, 0x76, 0x24, 0x97, 0xcf, 0x7d, 0x24, 0xc7, 0x78, 0x49, 0x77, 0x3d, 0xe4, 0xe5, 0x41, 0x94,
	0x97, 0x84, 0x2e, 0x2f, 0x78, 0x99, 0xa0, 0xf7, 0x74, 0xd7, 0xc2, 0xbe, 0xfe, 0x59, 0x02, 0x55,
	0x61, 0xe7, 0x3f, 0xb2, 0xb5, 0xa3, 0x67, 0x77, 0xeb, 0x3d, 0xe5, 0xb7, 0xbb, 0xd2, 0x00, 0x40,
	0x37, 0xda, 0x66, 0xd3, 0xf2, 0x50, 0xb3, 0xd6, 0xcd, 0x35, 0x5e, 0x76, 0x28, 0x8c, 0x58, 0x5d,
	0x0a, 0xaf, 0x04, 0xc7, 0x50, 0x60, 0x43, 0xea, 0xbc, 0xb7, 0xe0, 0xb5, 0x6a, 0x60, 0x81, 0x19,
	0x9b, 0x1d, 0x7c, 0x6c, 0x6b, 0x4c, 0xcb, 0xb9, 0x97, 0x25, 0xbb, 0x7f, 0x22, 0x19, 0x63, 0xf5,
	0x44, 0x8c, 0x48, 0x05, 0x6c, 0x75, 0xdb, 0x5b, 0xf8, 0xa4, 0xbc, 0x02, 0x50, 0x76, 0xcb, 0x43,
	0x66, 0xfe, 0x8e, 0x32, 0x13, 0xe5, 0xee, 0x82, 0x99, 0x67, 0xc0, 0xcc, 0x9c, 0xc7, 0xcc, 0x1f,
	0x49, 0x76, 0x52, 0x6d, 0x0f, 0xd9, 0xb9, 0x5f, 0x06, 0xf0, 0xc0, 0xea, 0xc6, 0xdf, 0x29, 0xef,
	0xa4, 0x31, 0xd9, 0xf7, 0xce, 0x1d, 0x62, 0xe3, 0xca, 0xe7, 0x60, 0xad, 0xad, 0x19, 0x1d, 0xdd,
	0x7b, 0x52, 0x53, 0x4c, 0xd6, 0xbe, 0x43, 0x61, 0x76, 0x90, 0x4b, 0xe1, 0x26, 0xc7, 0x9d, 0x19,
	0x82, 0xd4, 0x17, 0x42, 0xdf, 0x61, 0x9c, 0xc9, 0x01, 0x18, 0xbb, 0x9a, 0x22, 0x4e, 0xdf, 0x76,
	0x28, 0xcc, 0x0a, 0x71, 0x29, 0xac, 0x25, 0xb7, 0x4e, 0xf0, 0xbc, 0x12, 0x7a, 0x3e, 0x88, 0x12,
	0xbe, 0x07, 0xfe, 0x47, 0xfa, 0xba, 0xe1, 0x9d, 0xc5, 0x9c, 0xed, 0x0d, 0x87, 0xc2, 0xc0, 0xe4,
	0x52, 0x78, 0xd9, 0x17, 0x0d, 0x37, 0x20, 0x35, 0x70, 0x79, 0x03, 0xc6, 0x90, 0xd8, 0xd8, 0x4c,
	0xb5, 0xaa, 0x3c, 0x1e, 0x30, 0x84, 0x01, 0xe3, 0x01, 0x43, 0xe8, 0x46, 0xea, 0x12, 0xb3, 0x27,
	0xda, 0x83, 0x01, 0x37, 0x27, 0x5a, 0x33, 0xc3, 0x36, 0x7b, 0xc3, 0xa1, 0x50, 0xe4, 0x76, 0x29,
	0xac, 0x46, 0xb7, 0x4a, 0xb4, 0xe4, 0x0a, 0xb3, 0x46, 0xdb, 0x11, 0x11, 0xd6, 0x16, 0x78, 0x75,
	0x82, 0x62, 0x02, 0x75, 0xed, 0x7c, 0xb7, 0x08, 0xa6, 0x0f, 0xac, 0x6e, 0xe5, 0xbe, 0x04, 0x5e,
	0x7c, 0x57, 0x33, 0x3a, 0xc7, 0x58, 0xfc, 0x55, 0xfb, 0x9a, 0xf0, 0x9a, 0x13, 0xc6, 0x56, 0x77,
	0x8a, 0xc7, 0x86, 0x2a, 0xaf, 0x7f, 0xf1, 0xe3, 0xef, 0x5f, 0x97, 0x5e, 0x47, 0x5b, 0x8a, 0xe8,
	0xe3, 0xbc, 0xcd, 0x12, 0x9b, 0xb1, 0xa9, 0x36, 0x0e, 0x59, 0x30, 0x46, 0x67, 0x42, 0x4e, 0xc7,
	0x66, 0x43, 0xce, 0x19, 0x60, 0xf3, 0x21, 0x9b, 0x2c, 0x31, 0x0f, 0xb2, 0x60, 0xf2, 0xcb, 0x84,
	0x9c, 0x8e, 0xcd, 0x86, 0x9c, 0x33, 0xdb, 0xe4, 0x43, 0x1e, 0xb0, 0xc4, 0x04, 0xe4, 0xef, 0x25,
	0xb0, 0x99, 0x03, 0x99, 0x1f, 0x9b, 0x4a, 0x71, 0x2c, 0x2c, 0xa1, 0xba, 0x77, 0xce, 0x84, 0xb0,
	0x82, 0x3d, 0x56, 0x41, 0x1d, 0x29, 0x85, 0x2b, 0xe0, 0xa7, 0xbc, 0x48, 0xe0, 0xb1, 0xe1, 0x6e,
	0x82, 0xc0, 0xa3, 0xb1, 0x93, 0x04, 0x2e, 0x1c, 0x7f, 0x0a, 0x09, 0x3c, 0xf6, 0xd9, 0x22, 0x12,
	0x78, 0x31, 0xc8, 0xe9, 0xd8, 0x49, 0x02, 0x7f, 0x0c, 0xc8, 0xbe, 0xc0, 0x73, 0x20, 0x0b, 0x46,
	0xe8, 0x09, 0x02, 0x2f, 0x06, 0x39, 0x67, 0xc8, 0x2c, 0x24, 0xf0, 0x38, 0x64, 0x81, 0xc0, 0xd3,
	0x33, 0x90, 0x52, 0x1c, 0x4b, 0x21, 0x81, 0x67, 0x5f, 0xf7, 0x85, 0x04, 0x1e, 0xff, 0xbc, 0xe5,
	0x02, 0xff, 0x59, 0x02, 0x57, 0xc3, 0x3a, 0x72, 0xa7, 0x85, 0xdd, 0x2c, 0x6c, 0x79, 0x59, 0xd5,
	0x9b, 0x8f, 0x93, 0x15, 0x96, 0x75, 0x93, 0x95, 0xf5, 0x26, 0xda, 0x15, 0x96, 0x15, 0xaf, 0xc7,
	0x8c, 0x3c, 0xa4, 0xe9, 0xdd, 0x73, 0x8d, 0xc3, 0x87, 0xa7, 0x35, 0xe9, 0xd1, 0x69, 0x4d, 0xfa,
	0xed, 0xb4, 0x26, 0x7d, 0x75, 0x56, 0x9b, 0x7a, 0x74, 0x56, 0x9b, 0xfa, 0xe9, 0xac, 0x36, 0xf5,
	0xe9, 0x6e, 0x57, 0xb7, 0xef, 0x0e, 0x5a, 0x72, 0x9b, 0xf4, 0x82, 0x27, 0x1b, 0xd8, 0x0e, 0x7e,
	0x6e, 0xb7, 0xef, 0x6a, 0xba, 0xa1, 0x9c, 0x8c, 0x37, 0xf3, 0x3e, 0x0a, 0xad, 0xd6, 0x2c, 0xfb,
	0xcb, 0xeb, 0xfa, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x2f, 0x84, 0x5c, 0xa7, 0x16, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateResourceNode defines a method for creating a new resource node.
	HandleMsgCreateResourceNode(ctx context.Context, in *MsgCreateResourceNode, opts ...grpc.CallOption) (*MsgCreateResourceNodeResponse, error)
	HandleMsgRemoveResourceNode(ctx context.Context, in *MsgRemoveResourceNode, opts ...grpc.CallOption) (*MsgRemoveResourceNodeResponse, error)
	HandleMsgUpdateResourceNode(ctx context.Context, in *MsgUpdateResourceNode, opts ...grpc.CallOption) (*MsgUpdateResourceNodeResponse, error)
	HandleMsgUpdateResourceNodeStake(ctx context.Context, in *MsgUpdateResourceNodeStake, opts ...grpc.CallOption) (*MsgUpdateResourceNodeStakeResponse, error)
	HandleMsgCreateIndexingNode(ctx context.Context, in *MsgCreateIndexingNode, opts ...grpc.CallOption) (*MsgCreateIndexingNodeResponse, error)
	HandleMsgRemoveIndexingNode(ctx context.Context, in *MsgRemoveIndexingNode, opts ...grpc.CallOption) (*MsgRemoveIndexingNodeResponse, error)
	HandleMsgUpdateIndexingNode(ctx context.Context, in *MsgUpdateIndexingNode, opts ...grpc.CallOption) (*MsgUpdateIndexingNodeResponse, error)
	HandleMsgUpdateIndexingNodeStake(ctx context.Context, in *MsgUpdateIndexingNodeStake, opts ...grpc.CallOption) (*MsgUpdateIndexingNodeStakeResponse, error)
	HandleMsgIndexingNodeRegistrationVote(ctx context.Context, in *MsgIndexingNodeRegistrationVote, opts ...grpc.CallOption) (*MsgIndexingNodeRegistrationVoteResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) HandleMsgCreateResourceNode(ctx context.Context, in *MsgCreateResourceNode, opts ...grpc.CallOption) (*MsgCreateResourceNodeResponse, error) {
	out := new(MsgCreateResourceNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgCreateResourceNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgRemoveResourceNode(ctx context.Context, in *MsgRemoveResourceNode, opts ...grpc.CallOption) (*MsgRemoveResourceNodeResponse, error) {
	out := new(MsgRemoveResourceNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgRemoveResourceNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgUpdateResourceNode(ctx context.Context, in *MsgUpdateResourceNode, opts ...grpc.CallOption) (*MsgUpdateResourceNodeResponse, error) {
	out := new(MsgUpdateResourceNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgUpdateResourceNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgUpdateResourceNodeStake(ctx context.Context, in *MsgUpdateResourceNodeStake, opts ...grpc.CallOption) (*MsgUpdateResourceNodeStakeResponse, error) {
	out := new(MsgUpdateResourceNodeStakeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgUpdateResourceNodeStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgCreateIndexingNode(ctx context.Context, in *MsgCreateIndexingNode, opts ...grpc.CallOption) (*MsgCreateIndexingNodeResponse, error) {
	out := new(MsgCreateIndexingNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgCreateIndexingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgRemoveIndexingNode(ctx context.Context, in *MsgRemoveIndexingNode, opts ...grpc.CallOption) (*MsgRemoveIndexingNodeResponse, error) {
	out := new(MsgRemoveIndexingNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgRemoveIndexingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgUpdateIndexingNode(ctx context.Context, in *MsgUpdateIndexingNode, opts ...grpc.CallOption) (*MsgUpdateIndexingNodeResponse, error) {
	out := new(MsgUpdateIndexingNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgUpdateIndexingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgUpdateIndexingNodeStake(ctx context.Context, in *MsgUpdateIndexingNodeStake, opts ...grpc.CallOption) (*MsgUpdateIndexingNodeStakeResponse, error) {
	out := new(MsgUpdateIndexingNodeStakeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgUpdateIndexingNodeStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgIndexingNodeRegistrationVote(ctx context.Context, in *MsgIndexingNodeRegistrationVote, opts ...grpc.CallOption) (*MsgIndexingNodeRegistrationVoteResponse, error) {
	out := new(MsgIndexingNodeRegistrationVoteResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Msg/HandleMsgIndexingNodeRegistrationVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateResourceNode defines a method for creating a new resource node.
	HandleMsgCreateResourceNode(context.Context, *MsgCreateResourceNode) (*MsgCreateResourceNodeResponse, error)
	HandleMsgRemoveResourceNode(context.Context, *MsgRemoveResourceNode) (*MsgRemoveResourceNodeResponse, error)
	HandleMsgUpdateResourceNode(context.Context, *MsgUpdateResourceNode) (*MsgUpdateResourceNodeResponse, error)
	HandleMsgUpdateResourceNodeStake(context.Context, *MsgUpdateResourceNodeStake) (*MsgUpdateResourceNodeStakeResponse, error)
	HandleMsgCreateIndexingNode(context.Context, *MsgCreateIndexingNode) (*MsgCreateIndexingNodeResponse, error)
	HandleMsgRemoveIndexingNode(context.Context, *MsgRemoveIndexingNode) (*MsgRemoveIndexingNodeResponse, error)
	HandleMsgUpdateIndexingNode(context.Context, *MsgUpdateIndexingNode) (*MsgUpdateIndexingNodeResponse, error)
	HandleMsgUpdateIndexingNodeStake(context.Context, *MsgUpdateIndexingNodeStake) (*MsgUpdateIndexingNodeStakeResponse, error)
	HandleMsgIndexingNodeRegistrationVote(context.Context, *MsgIndexingNodeRegistrationVote) (*MsgIndexingNodeRegistrationVoteResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) HandleMsgCreateResourceNode(ctx context.Context, req *MsgCreateResourceNode) (*MsgCreateResourceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgCreateResourceNode not implemented")
}
func (*UnimplementedMsgServer) HandleMsgRemoveResourceNode(ctx context.Context, req *MsgRemoveResourceNode) (*MsgRemoveResourceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgRemoveResourceNode not implemented")
}
func (*UnimplementedMsgServer) HandleMsgUpdateResourceNode(ctx context.Context, req *MsgUpdateResourceNode) (*MsgUpdateResourceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgUpdateResourceNode not implemented")
}
func (*UnimplementedMsgServer) HandleMsgUpdateResourceNodeStake(ctx context.Context, req *MsgUpdateResourceNodeStake) (*MsgUpdateResourceNodeStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgUpdateResourceNodeStake not implemented")
}
func (*UnimplementedMsgServer) HandleMsgCreateIndexingNode(ctx context.Context, req *MsgCreateIndexingNode) (*MsgCreateIndexingNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgCreateIndexingNode not implemented")
}
func (*UnimplementedMsgServer) HandleMsgRemoveIndexingNode(ctx context.Context, req *MsgRemoveIndexingNode) (*MsgRemoveIndexingNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgRemoveIndexingNode not implemented")
}
func (*UnimplementedMsgServer) HandleMsgUpdateIndexingNode(ctx context.Context, req *MsgUpdateIndexingNode) (*MsgUpdateIndexingNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgUpdateIndexingNode not implemented")
}
func (*UnimplementedMsgServer) HandleMsgUpdateIndexingNodeStake(ctx context.Context, req *MsgUpdateIndexingNodeStake) (*MsgUpdateIndexingNodeStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgUpdateIndexingNodeStake not implemented")
}
func (*UnimplementedMsgServer) HandleMsgIndexingNodeRegistrationVote(ctx context.Context, req *MsgIndexingNodeRegistrationVote) (*MsgIndexingNodeRegistrationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgIndexingNodeRegistrationVote not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_HandleMsgCreateResourceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateResourceNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgCreateResourceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgCreateResourceNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgCreateResourceNode(ctx, req.(*MsgCreateResourceNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgRemoveResourceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveResourceNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgRemoveResourceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgRemoveResourceNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgRemoveResourceNode(ctx, req.(*MsgRemoveResourceNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgUpdateResourceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateResourceNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgUpdateResourceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgUpdateResourceNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgUpdateResourceNode(ctx, req.(*MsgUpdateResourceNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgUpdateResourceNodeStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateResourceNodeStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgUpdateResourceNodeStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgUpdateResourceNodeStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgUpdateResourceNodeStake(ctx, req.(*MsgUpdateResourceNodeStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgCreateIndexingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIndexingNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgCreateIndexingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgCreateIndexingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgCreateIndexingNode(ctx, req.(*MsgCreateIndexingNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgRemoveIndexingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveIndexingNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgRemoveIndexingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgRemoveIndexingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgRemoveIndexingNode(ctx, req.(*MsgRemoveIndexingNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgUpdateIndexingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateIndexingNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgUpdateIndexingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgUpdateIndexingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgUpdateIndexingNode(ctx, req.(*MsgUpdateIndexingNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgUpdateIndexingNodeStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateIndexingNodeStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgUpdateIndexingNodeStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgUpdateIndexingNodeStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgUpdateIndexingNodeStake(ctx, req.(*MsgUpdateIndexingNodeStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgIndexingNodeRegistrationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIndexingNodeRegistrationVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgIndexingNodeRegistrationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Msg/HandleMsgIndexingNodeRegistrationVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgIndexingNodeRegistrationVote(ctx, req.(*MsgIndexingNodeRegistrationVote))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratos.register.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleMsgCreateResourceNode",
			Handler:    _Msg_HandleMsgCreateResourceNode_Handler,
		},
		{
			MethodName: "HandleMsgRemoveResourceNode",
			Handler:    _Msg_HandleMsgRemoveResourceNode_Handler,
		},
		{
			MethodName: "HandleMsgUpdateResourceNode",
			Handler:    _Msg_HandleMsgUpdateResourceNode_Handler,
		},
		{
			MethodName: "HandleMsgUpdateResourceNodeStake",
			Handler:    _Msg_HandleMsgUpdateResourceNodeStake_Handler,
		},
		{
			MethodName: "HandleMsgCreateIndexingNode",
			Handler:    _Msg_HandleMsgCreateIndexingNode_Handler,
		},
		{
			MethodName: "HandleMsgRemoveIndexingNode",
			Handler:    _Msg_HandleMsgRemoveIndexingNode_Handler,
		},
		{
			MethodName: "HandleMsgUpdateIndexingNode",
			Handler:    _Msg_HandleMsgUpdateIndexingNode_Handler,
		},
		{
			MethodName: "HandleMsgUpdateIndexingNodeStake",
			Handler:    _Msg_HandleMsgUpdateIndexingNodeStake_Handler,
		},
		{
			MethodName: "HandleMsgIndexingNodeRegistrationVote",
			Handler:    _Msg_HandleMsgIndexingNodeRegistrationVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stratos/register/v1/tx.proto",
}

func (m *MsgCreateResourceNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateResourceNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateResourceNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x32
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateResourceNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateResourceNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateResourceNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateIndexingNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIndexingNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIndexingNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIndexingNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIndexingNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIndexingNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveResourceNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveResourceNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveResourceNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResourceNodeAddress) > 0 {
		i -= len(m.ResourceNodeAddress)
		copy(dAtA[i:], m.ResourceNodeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResourceNodeAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveResourceNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveResourceNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveResourceNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveIndexingNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveIndexingNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveIndexingNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IndexingNodeAddress) > 0 {
		i -= len(m.IndexingNodeAddress)
		copy(dAtA[i:], m.IndexingNodeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IndexingNodeAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveIndexingNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveIndexingNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveIndexingNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResourceNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResourceNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResourceNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResourceNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResourceNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResourceNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIndexingNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIndexingNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIndexingNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIndexingNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIndexingNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIndexingNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResourceNodeStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResourceNodeStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResourceNodeStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeDelta != nil {
		{
			size, err := m.StakeDelta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IncrStake {
		i--
		if m.IncrStake {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResourceNodeStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResourceNodeStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResourceNodeStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIndexingNodeStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIndexingNodeStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIndexingNodeStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeDelta != nil {
		{
			size, err := m.StakeDelta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IncrStake {
		i--
		if m.IncrStake {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIndexingNodeStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIndexingNodeStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIndexingNodeStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIndexingNodeRegistrationVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIndexingNodeRegistrationVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIndexingNodeRegistrationVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterOwnerAddress) > 0 {
		i -= len(m.VoterOwnerAddress)
		copy(dAtA[i:], m.VoterOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterOwnerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VoterNetworkAddress) > 0 {
		i -= len(m.VoterNetworkAddress)
		copy(dAtA[i:], m.VoterNetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterNetworkAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Opinion {
		i--
		if m.Opinion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.CandidateOwnerAddress) > 0 {
		i -= len(m.CandidateOwnerAddress)
		copy(dAtA[i:], m.CandidateOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CandidateOwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CandidateNetworkAddress) > 0 {
		i -= len(m.CandidateNetworkAddress)
		copy(dAtA[i:], m.CandidateNetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CandidateNetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIndexingNodeRegistrationVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIndexingNodeRegistrationVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIndexingNodeRegistrationVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateResourceNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateResourceNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateIndexingNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateIndexingNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveResourceNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceNodeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveResourceNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveIndexingNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IndexingNodeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveIndexingNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateResourceNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateResourceNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateIndexingNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateIndexingNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateResourceNodeStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IncrStake {
		n += 2
	}
	if m.StakeDelta != nil {
		l = m.StakeDelta.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateResourceNodeStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateIndexingNodeStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IncrStake {
		n += 2
	}
	if m.StakeDelta != nil {
		l = m.StakeDelta.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateIndexingNodeStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIndexingNodeRegistrationVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CandidateNetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CandidateOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Opinion {
		n += 2
	}
	l = len(m.VoterNetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIndexingNodeRegistrationVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateResourceNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateResourceNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateResourceNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateResourceNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateResourceNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateResourceNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIndexingNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIndexingNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIndexingNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIndexingNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIndexingNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIndexingNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveResourceNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveResourceNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveResourceNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceNodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveResourceNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveResourceNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveResourceNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveIndexingNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveIndexingNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveIndexingNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexingNodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexingNodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveIndexingNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveIndexingNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveIndexingNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResourceNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResourceNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResourceNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResourceNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResourceNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResourceNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIndexingNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIndexingNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIndexingNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIndexingNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIndexingNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIndexingNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResourceNodeStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResourceNodeStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResourceNodeStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrStake", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncrStake = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeDelta == nil {
				m.StakeDelta = &types1.Coin{}
			}
			if err := m.StakeDelta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResourceNodeStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResourceNodeStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResourceNodeStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIndexingNodeStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIndexingNodeStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIndexingNodeStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrStake", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncrStake = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeDelta == nil {
				m.StakeDelta = &types1.Coin{}
			}
			if err := m.StakeDelta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIndexingNodeStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIndexingNodeStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIndexingNodeStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIndexingNodeRegistrationVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIndexingNodeRegistrationVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIndexingNodeRegistrationVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateNetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidateNetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidateOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opinion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Opinion = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterNetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterNetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIndexingNodeRegistrationVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIndexingNodeRegistrationVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIndexingNodeRegistrationVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
