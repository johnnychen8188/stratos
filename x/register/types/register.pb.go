// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/register/v1/register.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the Register module parameters
type Params struct {
	BondDenom               string        `protobuf:"bytes,1,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom" yaml:"bond_denom"`
	UnbondingThreasholdTime time.Duration `protobuf:"bytes,2,opt,name=unbonding_threashold_time,json=unbondingThreasholdTime,proto3,stdduration" json:"unbonding_threashold_time" yaml:"unbonding_threashold_time"`
	UnbondingCompletionTime time.Duration `protobuf:"bytes,3,opt,name=unbonding_completion_time,json=unbondingCompletionTime,proto3,stdduration" json:"unbonding_completion_time" yaml:"unbonding_completion_time"`
	MaxEntries              uint32        `protobuf:"varint,4,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries" yaml:"max_entries",omitempty`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

func (m *Params) GetUnbondingThreasholdTime() time.Duration {
	if m != nil {
		return m.UnbondingThreasholdTime
	}
	return 0
}

func (m *Params) GetUnbondingCompletionTime() time.Duration {
	if m != nil {
		return m.UnbondingCompletionTime
	}
	return 0
}

func (m *Params) GetMaxEntries() uint32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

type ResourceNode struct {
	NetworkAddress string                                 `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey         *types.Any                             `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Suspend        bool                                   `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend" yaml:"suspend"`
	Status         types1.BondStatus                      `protobuf:"varint,4,opt,name=status,proto3,enum=cosmos.staking.v1beta1.BondStatus" json:"status" yaml:"status"`
	Tokens         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens" yaml:"tokens"`
	OwnerAddress   string                                 `protobuf:"bytes,6,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	Description    *Description                           `protobuf:"bytes,7,opt,name=description,proto3" json:"description" yaml:"description"`
	CreationTime   time.Time                              `protobuf:"bytes,8,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
	NodeType       string                                 `protobuf:"bytes,9,opt,name=node_type,json=nodeType,proto3" json:"node_type" yaml:"node_type"`
}

func (m *ResourceNode) Reset()         { *m = ResourceNode{} }
func (m *ResourceNode) String() string { return proto.CompactTextString(m) }
func (*ResourceNode) ProtoMessage()    {}
func (*ResourceNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{1}
}
func (m *ResourceNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceNode.Merge(m, src)
}
func (m *ResourceNode) XXX_Size() int {
	return m.Size()
}
func (m *ResourceNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceNode.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceNode proto.InternalMessageInfo

func (m *ResourceNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *ResourceNode) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ResourceNode) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *ResourceNode) GetStatus() types1.BondStatus {
	if m != nil {
		return m.Status
	}
	return types1.Unspecified
}

func (m *ResourceNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *ResourceNode) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ResourceNode) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func (m *ResourceNode) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

type IndexingNode struct {
	NetworkAddress string                                 `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey         *types.Any                             `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Suspend        bool                                   `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend" yaml:"suspend"`
	Status         types1.BondStatus                      `protobuf:"varint,4,opt,name=status,proto3,enum=cosmos.staking.v1beta1.BondStatus" json:"status" yaml:"status"`
	Tokens         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens" yaml:"tokens"`
	OwnerAddress   string                                 `protobuf:"bytes,6,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	Description    *Description                           `protobuf:"bytes,7,opt,name=description,proto3" json:"description" yaml:"description"`
	CreationTime   time.Time                              `protobuf:"bytes,8,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
}

func (m *IndexingNode) Reset()         { *m = IndexingNode{} }
func (m *IndexingNode) String() string { return proto.CompactTextString(m) }
func (*IndexingNode) ProtoMessage()    {}
func (*IndexingNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{2}
}
func (m *IndexingNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexingNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexingNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexingNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexingNode.Merge(m, src)
}
func (m *IndexingNode) XXX_Size() int {
	return m.Size()
}
func (m *IndexingNode) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexingNode.DiscardUnknown(m)
}

var xxx_messageInfo_IndexingNode proto.InternalMessageInfo

func (m *IndexingNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *IndexingNode) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *IndexingNode) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *IndexingNode) GetStatus() types1.BondStatus {
	if m != nil {
		return m.Status
	}
	return types1.Unspecified
}

func (m *IndexingNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *IndexingNode) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *IndexingNode) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

type IndexingNodeRegistrationVotePool struct {
	NetworkAddress string    `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	ApproveList    []string  `protobuf:"bytes,2,rep,name=approve_list,json=approveList,proto3" json:"approve_list" yaml:"approve_list"`
	RejectList     []string  `protobuf:"bytes,3,rep,name=reject_list,json=rejectList,proto3" json:"reject_list" yaml:"reject_list"`
	ExpireTime     time.Time `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3,stdtime" json:"expire_time" yaml:"expire_time"`
}

func (m *IndexingNodeRegistrationVotePool) Reset()         { *m = IndexingNodeRegistrationVotePool{} }
func (m *IndexingNodeRegistrationVotePool) String() string { return proto.CompactTextString(m) }
func (*IndexingNodeRegistrationVotePool) ProtoMessage()    {}
func (*IndexingNodeRegistrationVotePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{3}
}
func (m *IndexingNodeRegistrationVotePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexingNodeRegistrationVotePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexingNodeRegistrationVotePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexingNodeRegistrationVotePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexingNodeRegistrationVotePool.Merge(m, src)
}
func (m *IndexingNodeRegistrationVotePool) XXX_Size() int {
	return m.Size()
}
func (m *IndexingNodeRegistrationVotePool) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexingNodeRegistrationVotePool.DiscardUnknown(m)
}

var xxx_messageInfo_IndexingNodeRegistrationVotePool proto.InternalMessageInfo

func (m *IndexingNodeRegistrationVotePool) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *IndexingNodeRegistrationVotePool) GetApproveList() []string {
	if m != nil {
		return m.ApproveList
	}
	return nil
}

func (m *IndexingNodeRegistrationVotePool) GetRejectList() []string {
	if m != nil {
		return m.RejectList
	}
	return nil
}

func (m *IndexingNodeRegistrationVotePool) GetExpireTime() time.Time {
	if m != nil {
		return m.ExpireTime
	}
	return time.Time{}
}

type Description struct {
	Moniker         string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker" yaml:"moniker"`
	Identity        string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity" yaml:"identity",omitempty`
	Website         string `protobuf:"bytes,3,opt,name=website,proto3" json:"website" yaml:"website",omitempty`
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact" yaml:"security_contact",omitempty`
	Details         string `protobuf:"bytes,5,opt,name=details,proto3" json:"details" yaml:"details",omitempty`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{4}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type Slashing struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address" yaml:"wallet_address"`
	Value         int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value" yaml:"value"`
}

func (m *Slashing) Reset()         { *m = Slashing{} }
func (m *Slashing) String() string { return proto.CompactTextString(m) }
func (*Slashing) ProtoMessage()    {}
func (*Slashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{5}
}
func (m *Slashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Slashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Slashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Slashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slashing.Merge(m, src)
}
func (m *Slashing) XXX_Size() int {
	return m.Size()
}
func (m *Slashing) XXX_DiscardUnknown() {
	xxx_messageInfo_Slashing.DiscardUnknown(m)
}

var xxx_messageInfo_Slashing proto.InternalMessageInfo

func (m *Slashing) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *Slashing) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ResourceNodes struct {
	ResourceNodes []*ResourceNode `protobuf:"bytes,1,rep,name=resource_nodes,json=resourceNodes,proto3" json:"resource_nodes,omitempty"`
}

func (m *ResourceNodes) Reset()         { *m = ResourceNodes{} }
func (m *ResourceNodes) String() string { return proto.CompactTextString(m) }
func (*ResourceNodes) ProtoMessage()    {}
func (*ResourceNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{6}
}
func (m *ResourceNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceNodes.Merge(m, src)
}
func (m *ResourceNodes) XXX_Size() int {
	return m.Size()
}
func (m *ResourceNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceNodes.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceNodes proto.InternalMessageInfo

func (m *ResourceNodes) GetResourceNodes() []*ResourceNode {
	if m != nil {
		return m.ResourceNodes
	}
	return nil
}

type IndexingNodes struct {
	IndexingNodes []*IndexingNode `protobuf:"bytes,1,rep,name=indexing_nodes,json=indexingNodes,proto3" json:"indexing_nodes,omitempty"`
}

func (m *IndexingNodes) Reset()         { *m = IndexingNodes{} }
func (m *IndexingNodes) String() string { return proto.CompactTextString(m) }
func (*IndexingNodes) ProtoMessage()    {}
func (*IndexingNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{7}
}
func (m *IndexingNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexingNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexingNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexingNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexingNodes.Merge(m, src)
}
func (m *IndexingNodes) XXX_Size() int {
	return m.Size()
}
func (m *IndexingNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexingNodes.DiscardUnknown(m)
}

var xxx_messageInfo_IndexingNodes proto.InternalMessageInfo

func (m *IndexingNodes) GetIndexingNodes() []*IndexingNode {
	if m != nil {
		return m.IndexingNodes
	}
	return nil
}

type TotalStakesResponse struct {
	ResourceNodesTotalStake *types2.Coin `protobuf:"bytes,1,opt,name=resource_nodes_total_stake,json=resourceNodesTotalStake,proto3" json:"resource_nodes_total_stake,omitempty"`
	IndexingNodesTotalStake *types2.Coin `protobuf:"bytes,2,opt,name=indexing_nodes_total_stake,json=indexingNodesTotalStake,proto3" json:"indexing_nodes_total_stake,omitempty"`
	TotalBondedStake        *types2.Coin `protobuf:"bytes,3,opt,name=total_bonded_stake,json=totalBondedStake,proto3" json:"total_bonded_stake,omitempty"`
	TotalUnbondedStake      *types2.Coin `protobuf:"bytes,4,opt,name=total_unbonded_stake,json=totalUnbondedStake,proto3" json:"total_unbonded_stake,omitempty"`
	TotalUnbondingStake     *types2.Coin `protobuf:"bytes,5,opt,name=total_unbonding_stake,json=totalUnbondingStake,proto3" json:"total_unbonding_stake,omitempty"`
}

func (m *TotalStakesResponse) Reset()         { *m = TotalStakesResponse{} }
func (m *TotalStakesResponse) String() string { return proto.CompactTextString(m) }
func (*TotalStakesResponse) ProtoMessage()    {}
func (*TotalStakesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{8}
}
func (m *TotalStakesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalStakesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalStakesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalStakesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalStakesResponse.Merge(m, src)
}
func (m *TotalStakesResponse) XXX_Size() int {
	return m.Size()
}
func (m *TotalStakesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalStakesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TotalStakesResponse proto.InternalMessageInfo

func (m *TotalStakesResponse) GetResourceNodesTotalStake() *types2.Coin {
	if m != nil {
		return m.ResourceNodesTotalStake
	}
	return nil
}

func (m *TotalStakesResponse) GetIndexingNodesTotalStake() *types2.Coin {
	if m != nil {
		return m.IndexingNodesTotalStake
	}
	return nil
}

func (m *TotalStakesResponse) GetTotalBondedStake() *types2.Coin {
	if m != nil {
		return m.TotalBondedStake
	}
	return nil
}

func (m *TotalStakesResponse) GetTotalUnbondedStake() *types2.Coin {
	if m != nil {
		return m.TotalUnbondedStake
	}
	return nil
}

func (m *TotalStakesResponse) GetTotalUnbondingStake() *types2.Coin {
	if m != nil {
		return m.TotalUnbondingStake
	}
	return nil
}

type StakingInfo struct {
	NetworkAddress string                                  `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey         *types.Any                              `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Suspend        bool                                    `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend" yaml:"suspend"`
	Status         types1.BondStatus                       `protobuf:"varint,4,opt,name=status,proto3,enum=cosmos.staking.v1beta1.BondStatus" json:"status" yaml:"status"`
	Tokens         *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens" yaml:"tokens"`
	OwnerAddress   string                                  `protobuf:"bytes,6,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	Description    *Description                            `protobuf:"bytes,7,opt,name=description,proto3" json:"description" yaml:"description"`
	CreationTime   time.Time                               `protobuf:"bytes,8,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
	NodeType       string                                  `protobuf:"bytes,9,opt,name=node_type,json=nodeType,proto3" json:"node_type" yaml:"node_type"`
	BondedStake    *types2.Coin                            `protobuf:"bytes,10,opt,name=bonded_stake,json=bondedStake,proto3" json:"bonded_stake" yaml:"bonded_stake"`
	UnBondingStake *types2.Coin                            `protobuf:"bytes,11,opt,name=un_bonding_stake,json=unBondingStake,proto3" json:"un_bonding_stake" yaml:"un_bonding_stake"`
	UnBondedStake  *types2.Coin                            `protobuf:"bytes,12,opt,name=un_bonded_stake,json=unBondedStake,proto3" json:"un_bonded_stake" yaml:"un_bonded_stake"`
}

func (m *StakingInfo) Reset()         { *m = StakingInfo{} }
func (m *StakingInfo) String() string { return proto.CompactTextString(m) }
func (*StakingInfo) ProtoMessage()    {}
func (*StakingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{9}
}
func (m *StakingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingInfo.Merge(m, src)
}
func (m *StakingInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakingInfo proto.InternalMessageInfo

func (m *StakingInfo) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *StakingInfo) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *StakingInfo) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *StakingInfo) GetStatus() types1.BondStatus {
	if m != nil {
		return m.Status
	}
	return types1.Unspecified
}

func (m *StakingInfo) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *StakingInfo) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *StakingInfo) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func (m *StakingInfo) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *StakingInfo) GetBondedStake() *types2.Coin {
	if m != nil {
		return m.BondedStake
	}
	return nil
}

func (m *StakingInfo) GetUnBondingStake() *types2.Coin {
	if m != nil {
		return m.UnBondingStake
	}
	return nil
}

func (m *StakingInfo) GetUnBondedStake() *types2.Coin {
	if m != nil {
		return m.UnBondedStake
	}
	return nil
}

// UnbondingNode stores all of a single delegator's unbonding bonds
// for a single unbonding node in a time-ordered list
type UnbondingNode struct {
	NetworkAddr    string                `protobuf:"bytes,1,opt,name=network_addr,json=networkAddr,proto3" json:"network_addr" yaml:"network_addr"`
	IsIndexingNode bool                  `protobuf:"varint,2,opt,name=is_indexing_node,json=isIndexingNode,proto3" json:"is_indexing_node" yaml:"is_indexing_node"`
	Entries        []*UnbondingNodeEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries" yaml:"entries"`
}

func (m *UnbondingNode) Reset()         { *m = UnbondingNode{} }
func (m *UnbondingNode) String() string { return proto.CompactTextString(m) }
func (*UnbondingNode) ProtoMessage()    {}
func (*UnbondingNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{10}
}
func (m *UnbondingNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingNode.Merge(m, src)
}
func (m *UnbondingNode) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingNode) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingNode.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingNode proto.InternalMessageInfo

func (m *UnbondingNode) GetNetworkAddr() string {
	if m != nil {
		return m.NetworkAddr
	}
	return ""
}

func (m *UnbondingNode) GetIsIndexingNode() bool {
	if m != nil {
		return m.IsIndexingNode
	}
	return false
}

func (m *UnbondingNode) GetEntries() []*UnbondingNodeEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type UnbondingNodeEntry struct {
	CreationHeight int64                                   `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height" yaml:"creation_height"`
	CompletionTime time.Time                               `protobuf:"bytes,2,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
	InitialBalance *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=initial_balance,json=initialBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_balance" yaml:"initial_balance"`
	Balance        *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance" yaml:"balance"`
}

func (m *UnbondingNodeEntry) Reset()         { *m = UnbondingNodeEntry{} }
func (m *UnbondingNodeEntry) String() string { return proto.CompactTextString(m) }
func (*UnbondingNodeEntry) ProtoMessage()    {}
func (*UnbondingNodeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{11}
}
func (m *UnbondingNodeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingNodeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingNodeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingNodeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingNodeEntry.Merge(m, src)
}
func (m *UnbondingNodeEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingNodeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingNodeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingNodeEntry proto.InternalMessageInfo

func (m *UnbondingNodeEntry) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *UnbondingNodeEntry) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

type Staking struct {
	// network_address is the bech32-encoded address of the node.
	NetworkAddress string `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	// owner_address is the bech32-encoded address of owner of the node.
	OwnerAddress string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	// shares define the delegation shares received.
	Value github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"value" yaml:"value"`
}

func (m *Staking) Reset()         { *m = Staking{} }
func (m *Staking) String() string { return proto.CompactTextString(m) }
func (*Staking) ProtoMessage()    {}
func (*Staking) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1e3aeec8499d6, []int{12}
}
func (m *Staking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staking.Merge(m, src)
}
func (m *Staking) XXX_Size() int {
	return m.Size()
}
func (m *Staking) XXX_DiscardUnknown() {
	xxx_messageInfo_Staking.DiscardUnknown(m)
}

var xxx_messageInfo_Staking proto.InternalMessageInfo

func (m *Staking) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *Staking) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "stratos.register.v1.Params")
	proto.RegisterType((*ResourceNode)(nil), "stratos.register.v1.ResourceNode")
	proto.RegisterType((*IndexingNode)(nil), "stratos.register.v1.IndexingNode")
	proto.RegisterType((*IndexingNodeRegistrationVotePool)(nil), "stratos.register.v1.IndexingNodeRegistrationVotePool")
	proto.RegisterType((*Description)(nil), "stratos.register.v1.Description")
	proto.RegisterType((*Slashing)(nil), "stratos.register.v1.Slashing")
	proto.RegisterType((*ResourceNodes)(nil), "stratos.register.v1.ResourceNodes")
	proto.RegisterType((*IndexingNodes)(nil), "stratos.register.v1.IndexingNodes")
	proto.RegisterType((*TotalStakesResponse)(nil), "stratos.register.v1.TotalStakesResponse")
	proto.RegisterType((*StakingInfo)(nil), "stratos.register.v1.StakingInfo")
	proto.RegisterType((*UnbondingNode)(nil), "stratos.register.v1.UnbondingNode")
	proto.RegisterType((*UnbondingNodeEntry)(nil), "stratos.register.v1.UnbondingNodeEntry")
	proto.RegisterType((*Staking)(nil), "stratos.register.v1.Staking")
}

func init() {
	proto.RegisterFile("stratos/register/v1/register.proto", fileDescriptor_fef1e3aeec8499d6)
}

var fileDescriptor_fef1e3aeec8499d6 = []byte{
	// 1648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0xf7, 0xcc, 0xc4, 0x5f, 0x35, 0x1f, 0x36, 0x6d, 0x2f, 0x19, 0x1b, 0x70, 0x39, 0xc5, 0xc7,
	0x1a, 0x2d, 0x9e, 0x91, 0x13, 0x24, 0x04, 0x07, 0xa4, 0x74, 0x6c, 0xb2, 0xde, 0x85, 0xc8, 0x6a,
	0x9b, 0x5d, 0x05, 0x29, 0x1a, 0x7a, 0xba, 0x2b, 0xe3, 0x8a, 0x67, 0xaa, 0x46, 0x5d, 0x35, 0xb6,
	0xe7, 0x86, 0xc4, 0x1f, 0x40, 0x8e, 0x39, 0x72, 0x46, 0xe2, 0xc6, 0x1f, 0x11, 0xe5, 0x94, 0x23,
	0xe2, 0xd0, 0xa0, 0x84, 0xd3, 0x48, 0x5c, 0xfa, 0x06, 0x27, 0x54, 0x1f, 0x3d, 0x5d, 0xdd, 0x76,
	0x34, 0x04, 0xc8, 0x01, 0xe4, 0xd3, 0x74, 0xfd, 0x5e, 0xbd, 0xdf, 0x7b, 0x55, 0xaf, 0xde, 0xab,
	0x37, 0x05, 0x10, 0x17, 0x91, 0x2f, 0x18, 0x6f, 0x47, 0xb8, 0x47, 0xb8, 0xc0, 0x51, 0xfb, 0x7c,
	0x6f, 0xfa, 0xdd, 0x1a, 0x46, 0x4c, 0x30, 0x67, 0xcd, 0xcc, 0x69, 0x4d, 0xf1, 0xf3, 0xbd, 0xcd,
	0xf5, 0x1e, 0xeb, 0x31, 0x25, 0x6f, 0xcb, 0x2f, 0x3d, 0x75, 0x73, 0xa3, 0xc7, 0x58, 0xaf, 0x8f,
	0xdb, 0x6a, 0xd4, 0x1d, 0x3d, 0x6d, 0xfb, 0x74, 0x6c, 0x44, 0xb0, 0x28, 0x12, 0x64, 0x80, 0xb9,
	0xf0, 0x07, 0x43, 0x33, 0x61, 0xab, 0x38, 0x21, 0x1c, 0x45, 0xbe, 0x20, 0x8c, 0xa6, 0xdc, 0x01,
	0xe3, 0x03, 0xc6, 0x3b, 0xda, 0xa8, 0x1e, 0xa4, 0xaa, 0x7a, 0xd4, 0xee, 0xfa, 0x1c, 0xb7, 0xcf,
	0xf7, 0xba, 0x58, 0xf8, 0x7b, 0xed, 0x80, 0x91, 0x54, 0xf5, 0x5b, 0x46, 0xce, 0x85, 0x7f, 0x46,
	0x68, 0x6f, 0x3a, 0xc5, 0x8c, 0xf5, 0x2c, 0xf4, 0xd7, 0x0a, 0x58, 0x38, 0xf2, 0x23, 0x7f, 0xc0,
	0x1d, 0x17, 0x80, 0x2e, 0xa3, 0x61, 0x27, 0xc4, 0x94, 0x0d, 0x9a, 0xa5, 0xed, 0xd2, 0xce, 0xb2,
	0xfb, 0xcd, 0x49, 0x0c, 0x2d, 0x34, 0x89, 0xe1, 0x57, 0xc6, 0xfe, 0xa0, 0xff, 0x23, 0x94, 0x61,
	0xc8, 0x5b, 0x96, 0x83, 0x7d, 0xf9, 0xed, 0xfc, 0xb6, 0x04, 0x36, 0x46, 0x54, 0x8e, 0x09, 0xed,
	0x75, 0xc4, 0x69, 0x84, 0x7d, 0x7e, 0xca, 0xfa, 0x61, 0x47, 0x2e, 0xbc, 0x59, 0xde, 0x2e, 0xed,
	0x54, 0xef, 0x6e, 0xb4, 0xf4, 0xa2, 0x5b, 0xe9, 0xa2, 0x5b, 0xfb, 0x66, 0xd1, 0xee, 0xe1, 0xcb,
	0x18, 0xce, 0x4d, 0x62, 0xf8, 0x6e, 0x8e, 0x24, 0x86, 0xdb, 0xda, 0x83, 0x77, 0x4e, 0x41, 0x2f,
	0xfe, 0x0c, 0x4b, 0xde, 0xed, 0xa9, 0xfc, 0x64, 0x2a, 0x3e, 0x21, 0x03, 0x5c, 0x70, 0x31, 0x60,
	0x83, 0x61, 0x1f, 0x4b, 0xe3, 0xda, 0xc5, 0xca, 0xbf, 0xe1, 0x62, 0x81, 0xe3, 0x3a, 0x17, 0x0b,
	0x53, 0x8a, 0x2e, 0x3e, 0x98, 0x8a, 0x95, 0x8b, 0x47, 0xa0, 0x3a, 0xf0, 0x2f, 0x3b, 0x98, 0x8a,
	0x88, 0x60, 0xde, 0xbc, 0xb5, 0x5d, 0xda, 0xa9, 0xbb, 0xed, 0x49, 0x0c, 0x6d, 0x38, 0x89, 0xe1,
	0xd7, 0xb5, 0x19, 0x0b, 0x44, 0xdf, 0x63, 0x03, 0x22, 0xf0, 0x60, 0x28, 0xc6, 0x1e, 0x18, 0xf8,
	0x97, 0x07, 0x06, 0xfe, 0xfd, 0x02, 0xa8, 0x79, 0x98, 0xb3, 0x51, 0x14, 0xe0, 0x47, 0x2c, 0xc4,
	0xce, 0x17, 0x60, 0x85, 0x62, 0x71, 0xc1, 0xa2, 0xb3, 0x8e, 0x1f, 0x86, 0x11, 0xe6, 0xdc, 0x44,
	0x7c, 0x77, 0x12, 0xc3, 0xa2, 0x28, 0x89, 0xe1, 0x57, 0xb5, 0xa9, 0x82, 0x00, 0x79, 0x0d, 0x83,
	0xdc, 0xd7, 0x80, 0xe3, 0x83, 0x85, 0xe1, 0xa8, 0x7b, 0x86, 0xc7, 0x26, 0xd8, 0xeb, 0x57, 0x76,
	0xf2, 0x3e, 0x1d, 0xbb, 0xf7, 0x26, 0x31, 0x34, 0xf3, 0x92, 0x18, 0xd6, 0x35, 0xb7, 0x1e, 0xa3,
	0x57, 0x7f, 0xd8, 0x5d, 0x37, 0x07, 0x3d, 0x88, 0xc6, 0x43, 0xc1, 0x5a, 0x47, 0xa3, 0xee, 0xe7,
	0x78, 0xec, 0x19, 0x05, 0xe7, 0x07, 0x60, 0x91, 0x8f, 0xf8, 0x10, 0xd3, 0x50, 0x45, 0x6b, 0xc9,
	0xfd, 0xc6, 0x24, 0x86, 0x29, 0x94, 0xc4, 0xb0, 0xa1, 0xe9, 0x0c, 0x80, 0xbc, 0x54, 0xe4, 0x7c,
	0x09, 0x16, 0xb8, 0xf0, 0xc5, 0x48, 0xef, 0x68, 0xe3, 0x2e, 0x6a, 0x19, 0x3b, 0x69, 0x4a, 0x98,
	0x14, 0x69, 0xb9, 0x8c, 0x86, 0xc7, 0x6a, 0xa6, 0xfb, 0x35, 0xe9, 0xa9, 0xd6, 0xca, 0x3c, 0xd5,
	0x63, 0xe4, 0x19, 0x81, 0x5c, 0xb4, 0x60, 0x67, 0x98, 0xf2, 0xe6, 0xbc, 0xda, 0x43, 0x75, 0x46,
	0xfe, 0x14, 0xc3, 0xef, 0xf4, 0x88, 0x38, 0x1d, 0x75, 0x5b, 0x01, 0x1b, 0x98, 0xdc, 0x35, 0x3f,
	0xbb, 0x3c, 0x3c, 0x6b, 0x8b, 0xf1, 0x10, 0xf3, 0xd6, 0x21, 0x15, 0xd2, 0x84, 0xd6, 0xcf, 0x4c,
	0xe8, 0x31, 0xf2, 0x8c, 0xc0, 0x79, 0x04, 0xea, 0xec, 0x82, 0xe2, 0x68, 0x1a, 0xad, 0x05, 0x65,
	0xe9, 0xbb, 0x93, 0x18, 0xe6, 0x05, 0x49, 0x0c, 0xd7, 0x35, 0x45, 0x0e, 0x46, 0x5e, 0x4d, 0x8d,
	0xd3, 0x38, 0x11, 0x50, 0x0d, 0x31, 0x0f, 0x22, 0x32, 0x94, 0xa7, 0xae, 0xb9, 0xa8, 0x82, 0xb5,
	0xdd, 0xba, 0xa6, 0xea, 0xb5, 0xf6, 0xb3, 0x79, 0xee, 0xb7, 0xe5, 0x21, 0xb4, 0x14, 0x93, 0x18,
	0x3a, 0xda, 0x9a, 0x05, 0x22, 0xcf, 0x9e, 0xe2, 0x44, 0xa0, 0x1e, 0x44, 0xd8, 0xcf, 0x72, 0x6c,
	0x49, 0x19, 0xdb, 0xbc, 0x72, 0x32, 0x4e, 0xd2, 0xe2, 0xe8, 0xee, 0x99, 0x24, 0xcb, 0x2b, 0x66,
	0x4b, 0xcb, 0xc1, 0xe8, 0xb9, 0x4c, 0xa6, 0x5a, 0x8a, 0xa9, 0x0c, 0xfa, 0x31, 0x58, 0xa6, 0x2c,
	0xc4, 0x1d, 0xb9, 0xc7, 0xcd, 0x65, 0xb5, 0x55, 0x77, 0x26, 0x31, 0xcc, 0xc0, 0x24, 0x86, 0xab,
	0xe6, 0x48, 0xa7, 0x10, 0xf2, 0x96, 0xe4, 0xf7, 0x89, 0xfc, 0xfc, 0xdb, 0x3c, 0xa8, 0x1d, 0xd2,
	0x10, 0x5f, 0x12, 0xda, 0xbb, 0xc9, 0x97, 0x9b, 0x7c, 0xf9, 0x3f, 0xcf, 0x17, 0xf4, 0x8f, 0x32,
	0xd8, 0xb6, 0xcf, 0xbb, 0xa7, 0xd6, 0xa3, 0xaf, 0xbc, 0x2f, 0x98, 0xc0, 0x47, 0x8c, 0xf5, 0x3f,
	0x58, 0x0e, 0x7c, 0x06, 0x6a, 0xfe, 0x70, 0x18, 0xb1, 0x73, 0xdc, 0xe9, 0x13, 0x2e, 0x9a, 0xe5,
	0xed, 0xca, 0xce, 0xb2, 0xfb, 0xf1, 0x24, 0x86, 0x39, 0x3c, 0x89, 0xe1, 0x9a, 0x66, 0xb4, 0x51,
	0xe4, 0x55, 0xcd, 0xf0, 0xa7, 0x84, 0x0b, 0xe7, 0x27, 0xa0, 0x1a, 0xe1, 0x67, 0x38, 0x10, 0x9a,
	0xaa, 0xa2, 0xa8, 0x54, 0x14, 0x2c, 0x38, 0x8b, 0x82, 0x05, 0x22, 0x0f, 0xe8, 0x91, 0xe2, 0x79,
	0x06, 0xaa, 0xf8, 0x72, 0x48, 0x22, 0xac, 0x43, 0x70, 0x6b, 0x66, 0x08, 0x76, 0x4d, 0x08, 0x6c,
	0xb5, 0xcc, 0x8e, 0x05, 0xea, 0xed, 0x07, 0x1a, 0x51, 0x9b, 0xff, 0xf7, 0x32, 0xa8, 0x5a, 0x87,
	0x46, 0x26, 0xec, 0x80, 0x51, 0x72, 0x86, 0x23, 0xb3, 0xbf, 0x2a, 0x61, 0x0d, 0x94, 0x25, 0xac,
	0x01, 0x90, 0x97, 0x8a, 0x9c, 0x03, 0xb0, 0x44, 0x42, 0x4c, 0x05, 0x11, 0xba, 0x9c, 0xe8, 0xf3,
	0x3e, 0xc5, 0x92, 0x18, 0x6e, 0x68, 0xd5, 0x14, 0xb1, 0xdb, 0x85, 0xe9, 0x34, 0xe7, 0x3e, 0x58,
	0xbc, 0xc0, 0x5d, 0x4e, 0x84, 0x6e, 0x87, 0x74, 0x28, 0x52, 0x28, 0x89, 0x61, 0x53, 0x93, 0x18,
	0xc0, 0xe6, 0x48, 0x27, 0x39, 0x21, 0x58, 0xe5, 0x38, 0x18, 0x45, 0x44, 0x8c, 0x3b, 0x01, 0xa3,
	0xc2, 0x0f, 0x84, 0xda, 0xc3, 0x65, 0xf7, 0x87, 0x93, 0x18, 0x5e, 0x91, 0x25, 0x31, 0xbc, 0x63,
	0x4a, 0x45, 0x41, 0x62, 0xb3, 0xaf, 0xa4, 0xc2, 0x07, 0x5a, 0x26, 0x1d, 0x0d, 0xb1, 0xf0, 0x49,
	0x3f, 0x2d, 0x24, 0xca, 0x51, 0x03, 0x65, 0x8e, 0x1a, 0x20, 0xe7, 0x68, 0x8a, 0xfd, 0xa6, 0x04,
	0x96, 0x8e, 0xfb, 0x3e, 0x3f, 0x25, 0xb4, 0xe7, 0x78, 0xa0, 0x71, 0xe1, 0xf7, 0xfb, 0x58, 0x14,
	0xce, 0xf7, 0x27, 0x93, 0x18, 0x16, 0x24, 0x49, 0x0c, 0x3f, 0x32, 0xdb, 0x90, 0xc3, 0x91, 0x57,
	0xd7, 0x40, 0x7a, 0xb8, 0xdb, 0x60, 0xfe, 0xdc, 0xef, 0x8f, 0x74, 0xf3, 0x5b, 0x71, 0x37, 0x26,
	0x31, 0xd4, 0x40, 0x12, 0xc3, 0x9a, 0x66, 0x50, 0x43, 0xe4, 0x69, 0x18, 0x3d, 0x06, 0x75, 0xbb,
	0x53, 0xe3, 0xce, 0xa7, 0xa0, 0x11, 0x19, 0xa0, 0x23, 0x2f, 0x28, 0xe9, 0x55, 0x65, 0xa7, 0x7a,
	0xf7, 0xce, 0xb5, 0xd5, 0xc7, 0xd6, 0xf5, 0xea, 0x91, 0xcd, 0x24, 0xa9, 0xed, 0x24, 0x57, 0xd4,
	0xc4, 0x00, 0xff, 0x02, 0x75, 0xae, 0x40, 0xd4, 0x89, 0xcd, 0x84, 0x7e, 0x57, 0x01, 0x6b, 0x27,
	0x4c, 0xf8, 0xfd, 0x63, 0xe1, 0x9f, 0x61, 0xee, 0x61, 0x3e, 0x64, 0x94, 0xcb, 0x7b, 0x73, 0x33,
	0xef, 0x7c, 0x47, 0xc8, 0x59, 0x1d, 0x79, 0x85, 0x60, 0xb5, 0xbd, 0xb2, 0xdb, 0x36, 0xf7, 0x8a,
	0xfc, 0x2b, 0x33, 0xbd, 0x54, 0x1e, 0x30, 0x42, 0xbd, 0xdb, 0xb9, 0x05, 0x64, 0x06, 0x24, 0x6f,
	0xde, 0xf3, 0x1c, 0x6f, 0x79, 0x26, 0x6f, 0xce, 0x7b, 0x8b, 0xf7, 0x21, 0x70, 0x34, 0x91, 0xec,
	0xcc, 0x71, 0x68, 0xf8, 0x2a, 0xb3, 0xf8, 0x56, 0x95, 0x92, 0xab, 0x74, 0x34, 0xd1, 0xe7, 0x60,
	0x5d, 0x13, 0xe9, 0x26, 0x7f, 0x4a, 0x75, 0x6b, 0x16, 0x95, 0xb6, 0xff, 0x73, 0xa3, 0xa5, 0xc9,
	0x7e, 0x06, 0x3e, 0xb2, 0xc9, 0xe4, 0xa2, 0x35, 0xdb, 0xfc, 0x2c, 0xb6, 0x35, 0x8b, 0x8d, 0xd0,
	0x9e, 0xa2, 0x43, 0xbf, 0x5e, 0x06, 0xd5, 0x63, 0x7d, 0x87, 0x1f, 0xd2, 0xa7, 0xec, 0xa6, 0xb9,
	0xf9, 0x6f, 0x36, 0x37, 0x4f, 0x0a, 0xcd, 0xcd, 0xc1, 0x4d, 0x63, 0xf3, 0xbf, 0xfb, 0x47, 0xc0,
	0x21, 0xa0, 0x96, 0x4b, 0x5f, 0x30, 0x23, 0xe1, 0xdc, 0x4f, 0x5e, 0xc6, 0xb0, 0x24, 0x5b, 0x17,
	0x5b, 0x2d, 0x6b, 0x5d, 0x6c, 0x14, 0x79, 0x55, 0x3b, 0xc9, 0x2f, 0xc1, 0xea, 0x88, 0x76, 0xf2,
	0xf9, 0x5d, 0x9d, 0x65, 0xee, 0x9e, 0x31, 0x77, 0x45, 0x35, 0x89, 0xe1, 0xed, 0xf4, 0x15, 0x22,
	0x2f, 0x41, 0x5e, 0x63, 0x44, 0x5d, 0xab, 0x1e, 0x38, 0x02, 0xac, 0x98, 0x49, 0xd3, 0x75, 0xd6,
	0x66, 0x19, 0xde, 0x33, 0x86, 0x8b, 0x9a, 0x59, 0x79, 0x28, 0x08, 0x90, 0x57, 0xd7, 0x66, 0xcd,
	0x7a, 0xd1, 0x8b, 0x32, 0xa8, 0x4f, 0x0b, 0x93, 0xfa, 0x93, 0xf5, 0x19, 0xa8, 0xd9, 0x35, 0xc5,
	0x14, 0x21, 0xd5, 0x08, 0xda, 0x78, 0xb6, 0x9b, 0x36, 0x8a, 0xbc, 0xaa, 0x55, 0x7e, 0x9c, 0xc7,
	0x60, 0x95, 0xf0, 0x4e, 0xee, 0x8e, 0x50, 0x55, 0x68, 0x49, 0x3d, 0xa4, 0x5c, 0x91, 0x65, 0xdb,
	0x55, 0x94, 0x20, 0xaf, 0x41, 0x78, 0xee, 0xbf, 0xe0, 0x2f, 0xc1, 0x62, 0xfa, 0x34, 0x53, 0x51,
	0xd7, 0xe5, 0xc7, 0xd7, 0xa6, 0x4b, 0x6e, 0x6d, 0x07, 0x54, 0x44, 0x63, 0x5d, 0x9c, 0xb2, 0xf7,
	0x1b, 0x53, 0x9c, 0xd2, 0xb7, 0x1b, 0x2f, 0x15, 0xa1, 0x57, 0x15, 0xe0, 0x5c, 0x55, 0x97, 0x75,
	0x7a, 0x7a, 0xe0, 0x4f, 0x31, 0xe9, 0x9d, 0x0a, 0xb5, 0x45, 0x15, 0x5d, 0xa7, 0x0b, 0xa2, 0x2c,
	0x10, 0x05, 0x01, 0xf2, 0x1a, 0x29, 0xf2, 0xa9, 0x02, 0x9c, 0x73, 0xb0, 0x52, 0x7c, 0x07, 0x2b,
	0x7f, 0x88, 0xd4, 0x6c, 0x04, 0xf9, 0x77, 0xae, 0x5f, 0x95, 0xc0, 0x0a, 0xa1, 0x44, 0x10, 0x79,
	0xdf, 0xfa, 0x7d, 0x9f, 0x06, 0x69, 0xc7, 0xf9, 0xe5, 0x7b, 0x15, 0xcd, 0x22, 0x49, 0xb6, 0xf4,
	0x82, 0x40, 0xc6, 0x52, 0x23, 0xae, 0x06, 0x1c, 0x1f, 0x2c, 0xa6, 0x96, 0x75, 0x7f, 0xfa, 0xf0,
	0xbd, 0x2c, 0x2f, 0x66, 0x16, 0x4d, 0x30, 0xa7, 0x96, 0x52, 0x11, 0x7a, 0x5e, 0x06, 0x8b, 0xe6,
	0xb6, 0xfd, 0x60, 0x37, 0xed, 0x95, 0x5b, 0xa1, 0xfc, 0x9f, 0xdd, 0x0a, 0x4f, 0xd2, 0xae, 0x55,
	0x87, 0xe3, 0xe1, 0x7b, 0xfc, 0x41, 0xdf, 0xc7, 0xc1, 0xac, 0x1e, 0xd7, 0x7d, 0xf4, 0xf2, 0xcd,
	0x56, 0xe9, 0xf5, 0x9b, 0xad, 0xd2, 0x5f, 0xde, 0x6c, 0x95, 0x9e, 0xbf, 0xdd, 0x9a, 0x7b, 0xfd,
	0x76, 0x6b, 0xee, 0x8f, 0x6f, 0xb7, 0xe6, 0x7e, 0xf1, 0x7d, 0xcb, 0x82, 0x49, 0x2a, 0x8a, 0x45,
	0xfa, 0xb9, 0x1b, 0x9c, 0xfa, 0x84, 0xb6, 0x2f, 0xb3, 0x97, 0x7b, 0x65, 0xb3, 0xbb, 0xa0, 0xce,
	0xe7, 0xbd, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x86, 0xf6, 0xec, 0x5d, 0xda, 0x17, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxEntries != 0 {
		i = encodeVarintRegister(dAtA, i, uint64(m.MaxEntries))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnbondingCompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingCompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRegister(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnbondingThreasholdTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingThreasholdTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintRegister(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x4a
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintRegister(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRegister(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintRegister(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Suspend {
		i--
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexingNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexingNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexingNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintRegister(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x42
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRegister(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintRegister(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Suspend {
		i--
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexingNodeRegistrationVotePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexingNodeRegistrationVotePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexingNodeRegistrationVotePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpireTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintRegister(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x22
	if len(m.RejectList) > 0 {
		for iNdEx := len(m.RejectList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RejectList[iNdEx])
			copy(dAtA[i:], m.RejectList[iNdEx])
			i = encodeVarintRegister(dAtA, i, uint64(len(m.RejectList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ApproveList) > 0 {
		for iNdEx := len(m.ApproveList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApproveList[iNdEx])
			copy(dAtA[i:], m.ApproveList[iNdEx])
			i = encodeVarintRegister(dAtA, i, uint64(len(m.ApproveList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Slashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Slashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Slashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRegister(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceNodes) > 0 {
		for iNdEx := len(m.ResourceNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegister(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IndexingNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexingNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexingNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexingNodes) > 0 {
		for iNdEx := len(m.IndexingNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexingNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegister(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TotalStakesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalStakesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalStakesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalUnbondingStake != nil {
		{
			size, err := m.TotalUnbondingStake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalUnbondedStake != nil {
		{
			size, err := m.TotalUnbondedStake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TotalBondedStake != nil {
		{
			size, err := m.TotalBondedStake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IndexingNodesTotalStake != nil {
		{
			size, err := m.IndexingNodesTotalStake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceNodesTotalStake != nil {
		{
			size, err := m.ResourceNodesTotalStake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnBondedStake != nil {
		{
			size, err := m.UnBondedStake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.UnBondingStake != nil {
		{
			size, err := m.UnBondingStake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.BondedStake != nil {
		{
			size, err := m.BondedStake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x4a
	}
	n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err18 != nil {
		return 0, err18
	}
	i -= n18
	i = encodeVarintRegister(dAtA, i, uint64(n18))
	i--
	dAtA[i] = 0x42
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.Tokens != nil {
		{
			size := m.Tokens.Size()
			i -= size
			if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintRegister(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Suspend {
		i--
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegister(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsIndexingNode {
		i--
		if m.IsIndexingNode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.NetworkAddr) > 0 {
		i -= len(m.NetworkAddr)
		copy(dAtA[i:], m.NetworkAddr)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.NetworkAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingNodeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingNodeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingNodeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != nil {
		{
			size := m.Balance.Size()
			i -= size
			if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.InitialBalance != nil {
		{
			size := m.InitialBalance.Size()
			i -= size
			if _, err := m.InitialBalance.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintRegister(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	n21, err21 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err21 != nil {
		return 0, err21
	}
	i -= n21
	i = encodeVarintRegister(dAtA, i, uint64(n21))
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintRegister(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Staking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRegister(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegister(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegister(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingThreasholdTime)
	n += 1 + l + sovRegister(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingCompletionTime)
	n += 1 + l + sovRegister(uint64(l))
	if m.MaxEntries != 0 {
		n += 1 + sovRegister(uint64(m.MaxEntries))
	}
	return n
}

func (m *ResourceNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Suspend {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovRegister(uint64(m.Status))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovRegister(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovRegister(uint64(l))
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	return n
}

func (m *IndexingNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Suspend {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovRegister(uint64(m.Status))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovRegister(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovRegister(uint64(l))
	return n
}

func (m *IndexingNodeRegistrationVotePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if len(m.ApproveList) > 0 {
		for _, s := range m.ApproveList {
			l = len(s)
			n += 1 + l + sovRegister(uint64(l))
		}
	}
	if len(m.RejectList) > 0 {
		for _, s := range m.RejectList {
			l = len(s)
			n += 1 + l + sovRegister(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireTime)
	n += 1 + l + sovRegister(uint64(l))
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	return n
}

func (m *Slashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovRegister(uint64(m.Value))
	}
	return n
}

func (m *ResourceNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceNodes) > 0 {
		for _, e := range m.ResourceNodes {
			l = e.Size()
			n += 1 + l + sovRegister(uint64(l))
		}
	}
	return n
}

func (m *IndexingNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexingNodes) > 0 {
		for _, e := range m.IndexingNodes {
			l = e.Size()
			n += 1 + l + sovRegister(uint64(l))
		}
	}
	return n
}

func (m *TotalStakesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceNodesTotalStake != nil {
		l = m.ResourceNodesTotalStake.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.IndexingNodesTotalStake != nil {
		l = m.IndexingNodesTotalStake.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.TotalBondedStake != nil {
		l = m.TotalBondedStake.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.TotalUnbondedStake != nil {
		l = m.TotalUnbondedStake.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.TotalUnbondingStake != nil {
		l = m.TotalUnbondingStake.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	return n
}

func (m *StakingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Suspend {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovRegister(uint64(m.Status))
	}
	if m.Tokens != nil {
		l = m.Tokens.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovRegister(uint64(l))
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.BondedStake != nil {
		l = m.BondedStake.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.UnBondingStake != nil {
		l = m.UnBondingStake.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.UnBondedStake != nil {
		l = m.UnBondedStake.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	return n
}

func (m *UnbondingNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddr)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.IsIndexingNode {
		n += 2
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovRegister(uint64(l))
		}
	}
	return n
}

func (m *UnbondingNodeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovRegister(uint64(m.CreationHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovRegister(uint64(l))
	if m.InitialBalance != nil {
		l = m.InitialBalance.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovRegister(uint64(l))
	}
	return n
}

func (m *Staking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovRegister(uint64(l))
	return n
}

func sovRegister(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegister(x uint64) (n int) {
	return sovRegister(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingThreasholdTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnbondingThreasholdTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnbondingCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
			}
			m.MaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexingNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexingNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexingNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexingNodeRegistrationVotePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexingNodeRegistrationVotePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexingNodeRegistrationVotePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveList = append(m.ApproveList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectList = append(m.RejectList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpireTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Slashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceNodes = append(m.ResourceNodes, &ResourceNode{})
			if err := m.ResourceNodes[len(m.ResourceNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexingNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexingNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexingNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexingNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexingNodes = append(m.IndexingNodes, &IndexingNode{})
			if err := m.IndexingNodes[len(m.IndexingNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalStakesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalStakesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalStakesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNodesTotalStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceNodesTotalStake == nil {
				m.ResourceNodesTotalStake = &types2.Coin{}
			}
			if err := m.ResourceNodesTotalStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexingNodesTotalStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexingNodesTotalStake == nil {
				m.IndexingNodesTotalStake = &types2.Coin{}
			}
			if err := m.IndexingNodesTotalStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBondedStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalBondedStake == nil {
				m.TotalBondedStake = &types2.Coin{}
			}
			if err := m.TotalBondedStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnbondedStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalUnbondedStake == nil {
				m.TotalUnbondedStake = &types2.Coin{}
			}
			if err := m.TotalUnbondedStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnbondingStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalUnbondingStake == nil {
				m.TotalUnbondingStake = &types2.Coin{}
			}
			if err := m.TotalUnbondingStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Tokens = &v
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BondedStake == nil {
				m.BondedStake = &types2.Coin{}
			}
			if err := m.BondedStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnBondingStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnBondingStake == nil {
				m.UnBondingStake = &types2.Coin{}
			}
			if err := m.UnBondingStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnBondedStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnBondedStake == nil {
				m.UnBondedStake = &types2.Coin{}
			}
			if err := m.UnBondedStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIndexingNode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIndexingNode = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &UnbondingNodeEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingNodeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingNodeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingNodeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.InitialBalance = &v
			if err := m.InitialBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Balance = &v
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegister(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegister
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegister
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegister
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegister        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegister          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegister = fmt.Errorf("proto: unexpected end of group")
)
